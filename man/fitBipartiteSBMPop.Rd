% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/R6class-fitBipartiteSBMPop.R
\name{fitBipartiteSBMPop}
\alias{fitBipartiteSBMPop}
\title{An R6 Class object, a fitted population of netowrks sbm
once $optimize() is done}
\description{
An R6 Class object, a fitted population of netowrks sbm
once $optimize() is done

An R6 Class object, a fitted population of netowrks sbm
once $optimize() is done
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{fitBipartiteSBMPop$new()}}
\item \href{#method-compute_map}{\code{fitBipartiteSBMPop$compute_map()}}
\item \href{#method-objective}{\code{fitBipartiteSBMPop$objective()}}
\item \href{#method-vb_tau_alpha}{\code{fitBipartiteSBMPop$vb_tau_alpha()}}
\item \href{#method-vb_tau_pi}{\code{fitBipartiteSBMPop$vb_tau_pi()}}
\item \href{#method-entropy_tau}{\code{fitBipartiteSBMPop$entropy_tau()}}
\item \href{#method-fn_vb_alpha_delta}{\code{fitBipartiteSBMPop$fn_vb_alpha_delta()}}
\item \href{#method-gr_vb_alpha_delta}{\code{fitBipartiteSBMPop$gr_vb_alpha_delta()}}
\item \href{#method-eval_g0_vb_alpha_delta}{\code{fitBipartiteSBMPop$eval_g0_vb_alpha_delta()}}
\item \href{#method-eval_jac_g0_vb_alpha_delta}{\code{fitBipartiteSBMPop$eval_jac_g0_vb_alpha_delta()}}
\item \href{#method-update_alpha_delta}{\code{fitBipartiteSBMPop$update_alpha_delta()}}
\item \href{#method-compute_vbound}{\code{fitBipartiteSBMPop$compute_vbound()}}
\item \href{#method-compute_penalty}{\code{fitBipartiteSBMPop$compute_penalty()}}
\item \href{#method-compute_icl}{\code{fitBipartiteSBMPop$compute_icl()}}
\item \href{#method-compute_icl_clustering}{\code{fitBipartiteSBMPop$compute_icl_clustering()}}
\item \href{#method-compute_exact_icl}{\code{fitBipartiteSBMPop$compute_exact_icl()}}
\item \href{#method-compute_exact_icl_iid}{\code{fitBipartiteSBMPop$compute_exact_icl_iid()}}
\item \href{#method-update_map_parameters}{\code{fitBipartiteSBMPop$update_map_parameters()}}
\item \href{#method-fixed_point_tau}{\code{fitBipartiteSBMPop$fixed_point_tau()}}
\item \href{#method-fixed_point_alpha_delta}{\code{fitBipartiteSBMPop$fixed_point_alpha_delta()}}
\item \href{#method-update_pi}{\code{fitBipartiteSBMPop$update_pi()}}
\item \href{#method-update_alpham}{\code{fitBipartiteSBMPop$update_alpham()}}
\item \href{#method-update_alpha}{\code{fitBipartiteSBMPop$update_alpha()}}
\item \href{#method-init_clust}{\code{fitBipartiteSBMPop$init_clust()}}
\item \href{#method-make_permutation}{\code{fitBipartiteSBMPop$make_permutation()}}
\item \href{#method-m_step}{\code{fitBipartiteSBMPop$m_step()}}
\item \href{#method-ve_step}{\code{fitBipartiteSBMPop$ve_step()}}
\item \href{#method-update_mqr}{\code{fitBipartiteSBMPop$update_mqr()}}
\item \href{#method-optimize}{\code{fitBipartiteSBMPop$optimize()}}
\item \href{#method-clone}{\code{fitBipartiteSBMPop$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$new(
  A = NULL,
  Q = NULL,
  Z = NULL,
  mask = NULL,
  net_id = NULL,
  model = "bernoulli",
  free_mixture = TRUE,
  free_density = TRUE,
  directed = NULL,
  init_method = "spectral",
  weight = NULL,
  fit_opts = list(algo_ve = "fp", approx_pois = TRUE, minibatch = TRUE, verbosity = 1)
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_map"></a>}}
\if{latex}{\out{\hypertarget{method-compute_map}{}}}
\subsection{Method \code{compute_map()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$compute_map()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-objective"></a>}}
\if{latex}{\out{\hypertarget{method-objective}{}}}
\subsection{Method \code{objective()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$objective()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-vb_tau_alpha"></a>}}
\if{latex}{\out{\hypertarget{method-vb_tau_alpha}{}}}
\subsection{Method \code{vb_tau_alpha()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$vb_tau_alpha(m, map = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-vb_tau_pi"></a>}}
\if{latex}{\out{\hypertarget{method-vb_tau_pi}{}}}
\subsection{Method \code{vb_tau_pi()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$vb_tau_pi(m, map = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-entropy_tau"></a>}}
\if{latex}{\out{\hypertarget{method-entropy_tau}{}}}
\subsection{Method \code{entropy_tau()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$entropy_tau(m)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fn_vb_alpha_delta"></a>}}
\if{latex}{\out{\hypertarget{method-fn_vb_alpha_delta}{}}}
\subsection{Method \code{fn_vb_alpha_delta()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$fn_vb_alpha_delta(par, emqr, nmqr)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gr_vb_alpha_delta"></a>}}
\if{latex}{\out{\hypertarget{method-gr_vb_alpha_delta}{}}}
\subsection{Method \code{gr_vb_alpha_delta()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$gr_vb_alpha_delta(par, emqr, nmqr)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-eval_g0_vb_alpha_delta"></a>}}
\if{latex}{\out{\hypertarget{method-eval_g0_vb_alpha_delta}{}}}
\subsection{Method \code{eval_g0_vb_alpha_delta()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$eval_g0_vb_alpha_delta(par, emqr, nmqr)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-eval_jac_g0_vb_alpha_delta"></a>}}
\if{latex}{\out{\hypertarget{method-eval_jac_g0_vb_alpha_delta}{}}}
\subsection{Method \code{eval_jac_g0_vb_alpha_delta()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$eval_jac_g0_vb_alpha_delta(par, emqr, nmqr)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_alpha_delta"></a>}}
\if{latex}{\out{\hypertarget{method-update_alpha_delta}{}}}
\subsection{Method \code{update_alpha_delta()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$update_alpha_delta(map = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_vbound"></a>}}
\if{latex}{\out{\hypertarget{method-compute_vbound}{}}}
\subsection{Method \code{compute_vbound()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$compute_vbound()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_penalty"></a>}}
\if{latex}{\out{\hypertarget{method-compute_penalty}{}}}
\subsection{Method \code{compute_penalty()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$compute_penalty()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_icl"></a>}}
\if{latex}{\out{\hypertarget{method-compute_icl}{}}}
\subsection{Method \code{compute_icl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$compute_icl(map = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_icl_clustering"></a>}}
\if{latex}{\out{\hypertarget{method-compute_icl_clustering}{}}}
\subsection{Method \code{compute_icl_clustering()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$compute_icl_clustering(map = TRUE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_exact_icl"></a>}}
\if{latex}{\out{\hypertarget{method-compute_exact_icl}{}}}
\subsection{Method \code{compute_exact_icl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$compute_exact_icl()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_exact_icl_iid"></a>}}
\if{latex}{\out{\hypertarget{method-compute_exact_icl_iid}{}}}
\subsection{Method \code{compute_exact_icl_iid()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$compute_exact_icl_iid()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_map_parameters"></a>}}
\if{latex}{\out{\hypertarget{method-update_map_parameters}{}}}
\subsection{Method \code{update_map_parameters()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$update_map_parameters()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fixed_point_tau"></a>}}
\if{latex}{\out{\hypertarget{method-fixed_point_tau}{}}}
\subsection{Method \code{fixed_point_tau()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$fixed_point_tau(m, d, max_iter = 10, tol = 0.001)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fixed_point_alpha_delta"></a>}}
\if{latex}{\out{\hypertarget{method-fixed_point_alpha_delta}{}}}
\subsection{Method \code{fixed_point_alpha_delta()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$fixed_point_alpha_delta(
  map = FALSE,
  max_iter = 50,
  tol = 1e-06
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_pi"></a>}}
\if{latex}{\out{\hypertarget{method-update_pi}{}}}
\subsection{Method \code{update_pi()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$update_pi(m, map = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_alpham"></a>}}
\if{latex}{\out{\hypertarget{method-update_alpham}{}}}
\subsection{Method \code{update_alpham()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$update_alpham(m, map = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_alpha"></a>}}
\if{latex}{\out{\hypertarget{method-update_alpha}{}}}
\subsection{Method \code{update_alpha()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$update_alpha(map = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-init_clust"></a>}}
\if{latex}{\out{\hypertarget{method-init_clust}{}}}
\subsection{Method \code{init_clust()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$init_clust()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-make_permutation"></a>}}
\if{latex}{\out{\hypertarget{method-make_permutation}{}}}
\subsection{Method \code{make_permutation()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$make_permutation()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-m_step"></a>}}
\if{latex}{\out{\hypertarget{method-m_step}{}}}
\subsection{Method \code{m_step()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$m_step(map = FALSE, max_iter = 100, tol = 0.001, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ve_step"></a>}}
\if{latex}{\out{\hypertarget{method-ve_step}{}}}
\subsection{Method \code{ve_step()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$ve_step(m, max_iter = 20, tol = 0.001, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_mqr"></a>}}
\if{latex}{\out{\hypertarget{method-update_mqr}{}}}
\subsection{Method \code{update_mqr()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$update_mqr(m)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-optimize"></a>}}
\if{latex}{\out{\hypertarget{method-optimize}{}}}
\subsection{Method \code{optimize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$optimize(max_step = 100, tol = 0.001, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{fitBipartiteSBMPop$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
