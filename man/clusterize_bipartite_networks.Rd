% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimatepopbm.R
\name{clusterize_bipartite_networks}
\alias{clusterize_bipartite_networks}
\title{Partition of a collection of bipartite networks based on their common
mesoscale structures}
\usage{
clusterize_bipartite_networks(
  netlist,
  colsbm_model,
  net_id = NULL,
  distribution = "bernoulli",
  fit_sbm = NULL,
  nb_run = 3L,
  global_opts = list(),
  fit_opts = list(),
  fit_init = NULL,
  full_inference = FALSE
)
}
\arguments{
\item{netlist}{A list of matrices.}

\item{colsbm_model}{Which colSBM to use, one of "iid", "pi", "rho", "pirho",
"delta", "deltapi".}

\item{net_id}{A vector of string, the name of the networks.}

\item{distribution}{A string, the emission distribution, either "bernoulli"
(the default) or "poisson"}

\item{nb_run}{An integer, the number of run the algorithm do.}

\item{global_opts}{Global options for the outer algorithm and the output}

\item{fit_opts}{Fit options for the VEM algorithm}

\item{fit_init}{Do not use!
Optional fit init from where initializing the algorithm.}

\item{full_inference}{The default "FALSE", the algorithm stop once splitting
groups of networks does not improve the BICL criterion. If "TRUE", then
continue to split groups until a trivial classification of one network per
group.}

\item{fit}{is a bisbmpop object, ie an instance of the colBiSBM model
fitted}
}
\value{
A list of models for the recursive partition of
the collection of networks.
}
\description{
Partition of a collection of bipartite networks based on their common
mesoscale structures
}
\details{
The best partition could be extract with the function
\code{extract_best_partition()}. The object of the list are fitBipartiteSBMPop
object, so it is a model for a given number of blocks Q1, Q2.
}
\examples{

#' # Trivial example with Gnp networks:
Net <- lapply(list(.7, .7, .2, .2),
              function(p) {
               A <- matrix(0, 15, 15 )
               A[lower.tri(A)][sample(15*14/2, size = round(p*15*14/2))] <- 1
               A <- A + t(A)
              })
\dontrun{cl <- clusterized_networks(Net,
                           colsbm_model = "iid",
                           directed = FALSE,
                           model = "bernoulli",
                           nb_run = 1
                           )}
Perform the recursive clustering of the networks

}
\seealso{
\code{\link[=extract_best_partition]{extract_best_partition()}}, \code{\link[=estimate_colSBM]{estimate_colSBM()}},
\code{\link[colSBM]{fitSimpleSBMPop}}, \code{browseVignettes("colSBM")}
}
