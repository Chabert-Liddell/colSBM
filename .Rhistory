sum(sapply(A_30plus, function(A) sum(A)))
gc()
df_dataset <- data.frame(net_id = fit_1$net_id,
group = 1) %>%
bind_rows(data.frame(net_id = fit_21$net_id,
group = 2)) %>%
bind_rows(data.frame(net_id = fit_221$net_id,
group = 3)) %>%
bind_rows(data.frame(net_id = fit_2221$net_id,
group = 4)) %>%
bind_rows(data.frame(net_id = fit_2222$net_id,
group = 5))
df_dataset  <- df_dataset %>% full_join(data.frame(net_id = net_id,
dataset =sapply(net_30plus[2:68], function(net) net$dataset$dataset_id) ))
table(LETTERS[df_dataset$group], df_dataset$dataset)
(fit_full$Cpi[c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6),order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
reshape2::melt() %>%
rename(Block = Var1, Network = Var2) %>%
ggplot(aes(y = Block, x = Network, fill = 1*value)) +
geom_tile(show.legend = FALSE) +
geom_hline(yintercept = seq(0,12) + .5, size = .1) +
geom_vline(xintercept = seq(0,66) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "black") +
#scale_y_reverse() +
coord_flip() +
coord_fixed(expand = FALSE) +
theme_bw(base_size = 15))
(fit_full$Cpi[c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6),order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
reshape2::melt() %>%
rename(Block = Var1, Network = Var2) %>%
ggplot(aes(y = Block, x = Network, fill = 1*value)) +
geom_tile(show.legend = FALSE) +
geom_hline(yintercept = seq(0,12) + .5, size = .1) +
geom_vline(xintercept = seq(0,66) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "black") +
#scale_y_reverse() +
coord_flip() +
coord_fixed(expand = FALSE) +
theme_bw(base_size = 15)) +
(  plot_colsbm_mesoiid(fit_full, ord = #order(rowSums(fit_full$alpha)))#
c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6)))
plot_colsbm_mesoiid <- function(fit, ord = NULL,  title = NULL, tag = NULL) {
#ord <- order(colSums(fit$alpha > .01) - rowSums(fit$alpha >.01)/2, decreasing = FALSE)
#  if(is.null(ord)) ord <- order(as.vector(fit$alpha %*% Reduce("+", fit$pi)/fit$M), decreasing = FALSE)
if(is.null(ord)) {
p <- gtools::permutations(nrow(fit$alpha),nrow(fit$alpha))
pi <- colMeans(Reduce("rbind", fit$tau))#Reduce("+", fit$pi)/fit$M
i <- which.min(sapply(
seq(nrow(p)),
function(x) sum((tcrossprod(pi) * fit$alpha)[p[x,],p[x,]][upper.tri(fit$alpha)])))
ord <- p[i,]
}
pi <- colMeans(Reduce("rbind", fit$tau))
p_alpha_pr_res <- (fit$alpha[ord, ord]*max(fit$delta)) %>% t() %>% reshape2::melt() %>%
mutate(xmax = rep(c(0,cumsum(pi[ord][1:(fit$Q-1)])), fit$Q),
xmin = rep(cumsum(pi[ord]), fit$Q),
ymax = rep(c(0,cumsum(pi[ord][1:(fit$Q-1)])), each = fit$Q),
ymin = rep(cumsum(pi[ord]), each = fit$Q)) %>%
ggplot(aes(xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax, fill = value)) +
geom_rect() +
scale_fill_gradient2(TeX("$\\alpha"), low = "white", mid = "red", midpoint = 1) +
geom_hline(yintercept = cumsum(pi[ord][1:(fit$Q-1)]), size = .2) +
geom_vline(xintercept = cumsum(pi[ord][1:(fit$Q-1)]), size = .2) +
scale_y_reverse() +
theme_bw(base_size = 15, base_rect_size = 1, base_line_size  = 1) +
xlab("") + ylab("") + coord_equal(expand = FALSE) +
theme(axis.ticks =  element_blank(),
axis.title = element_blank(), axis.text = element_blank()) +
labs(tag =  tag)
return(p_alpha_pr_res)
}
plot_colsbm_nomix <- function(fit, ord = NULL,  title = NULL, tag = NULL) {
if (fit$free_mixture) {pim <- fit$pi} else {pim <- fit$pim}
#ord <- order(colSums(fit$alpha > .01) - rowSums(fit$alpha >.01)/2, decreasing = FALSE)
#  if(is.null(ord)) ord <- order(as.vector(fit$alpha %*% Reduce("+", fit$pi)/fit$M), decreasing = FALSE)
if(is.null(ord)) {
p <- gtools::permutations(nrow(fit$alpha),nrow(fit$alpha))
i <- which.min(sapply(seq(nrow(p)),
function(x) sum(fit$alpha[p[x,],p[x,]][upper.tri(fit$alpha)])))
ord <- p[i,]
}
# ord <- order(rowSums(fit$alpha) - diag(fit$alpha), decreasing = FALSE)
p_alpha_pr_res <- fit$alpha[ord, ord] %>% t() %>%
reshape2::melt() %>%
ggplot(aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(Tex("$\\alpha"), low = "white", mid = "red", midpoint = 1) +
geom_hline(yintercept =  seq(fit$Q)+.5) +
geom_vline(xintercept =  seq(fit$Q)+.5) +
scale_y_reverse() +
theme_bw(base_size = 15, base_rect_size = 1, base_line_size  = 1) +
xlab("") + ylab("") + coord_fixed(expand = FALSE) +
labs(tag =  tag)
return(p_alpha_pr_res)
}
p_graphon <- (plot_colsbm_mesoiid(fit_1, c(11, 9, 12, 3, 8, 5, 1, 2, 7, 6, 4, 10)) +
plot_colsbm_mesoiid(fit_21) +
plot_colsbm_mesoiid(fit_221) +
plot_colsbm_mesoiid(fit_2221) +
plot_colsbm_mesoiid(fit_2222) + plot_layout(guides = "collect", nrow = 1, ) + plot_annotation(tag_levels = "A") & theme(legend.position='none'))
df_dataset <- data.frame(net_id = fit_1$net_id,
group = 1) %>%
bind_rows(data.frame(net_id = fit_21$net_id,
group = 2)) %>%
bind_rows(data.frame(net_id = fit_221$net_id,
group = 3)) %>%
bind_rows(data.frame(net_id = fit_2221$net_id,
group = 4)) %>%
bind_rows(data.frame(net_id = fit_2222$net_id,
group = 5))
df_dataset  <- df_dataset %>% full_join(data.frame(net_id = net_id,
dataset =sapply(net_30plus[2:68], function(net) net$dataset$dataset_id) ))
table(LETTERS[df_dataset$group], df_dataset$dataset)
#===============================================================================
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 48))]
df_dataset[df_dataset$dataset ==48,] # (site A and C for group 3, site B for group 2 and 4)
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 88))]
df_dataset[df_dataset$dataset ==88,] #
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 95))]
df_dataset[df_dataset$dataset ==95,] # (different types of soils)
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 115))]
df_dataset[df_dataset$dataset == 115,] # (rotting oak logs for group 2, rotting pine logs for group 4)
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 144))]
df_dataset[df_dataset$dataset == 144,] #
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 153))]
df_dataset[df_dataset$dataset ==153,] # Different model for food web structure
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 157))]
df_dataset[df_dataset$dataset ==157,] # Creek for group 2 and stream for group 4
p_contingency <- table(LETTERS[df_dataset$group], df_dataset$dataset) %>% t() %>%
reshape2::melt() %>%
ggplot(aes(x = as.factor(Var1), y = as.factor(Var2), fill = as.integer(value))) +
geom_tile() +
geom_hline(yintercept = seq(0,5) + .5, size = .1) +
geom_vline(xintercept = seq(0,32) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "blue",
guide = guide_legend(title = "# Networks"), breaks = c(0, 1,2,3, 4,5,10), labels = c(0, 1,2,3, 4,5,7)) +
scale_x_discrete(guide = guide_axis(title = "Mangal database id",angle = 90)) +
scale_y_discrete(guide = guide_axis(title = latex2exp::TeX("$\\pi$colSBM groups")), position = "left") +
coord_cartesian(expand = FALSE) +
theme_bw(base_size = 15)
best_icl <- sum(fit_1$ICL_clustering+fit_21$ICL_clustering+fit_221$ICL_clustering +
fit_2221$ICL_clustering + fit_2222$ICL_clustering)
diff_icl <- rep(0, 4)
diff_icl[1] <- list_icl[5] - sum(list_icl[c(6,7)])
diff_icl[2] <- diff_icl[1] + list_icl[3] - sum(list_icl[c(4,5)])
diff_icl[3] <- diff_icl[2] + list_icl[1] - sum(list_icl[c(2,3)])
diff_icl[4] <- diff_icl[3] +fit_full$ICL_clustering - list_icl[1] - fit_1$ICL_clustering
a <- list()  # initialize empty object
# define merging pattern:
#    negative numbers are leaves,
#    positive are merged clusters (defined by row number in $merge)
a$merge <- matrix(c(-5, -4,
1, -3,
2, -2,
3, -1), nc=2, byrow=TRUE )
a$height <-  -diff_icl    # define merge heights
a$order <- 1:5              # order of leaves(trivial if hand-entered)
a$labels <- LETTERS[1:5]    # labels of leaves
class(a) <- "hclust"        # make it an hclust object
plot(a)                     # look at the result
#convert to a dendrogram object if needed
ad <- as.dendrogram(a)
library(ggdendro)
pden <- ggdendro::ggdendrogram(ggdendro::dendro_data(ad)) +
ylab(latex2exp::TeX("$\\Delta_{BIC-L}$")) + scale_x_reverse(labels = LETTERS[5:1]) +
xlab("")  + coord_cartesian(expand = FALSE) +
theme_minimal(base_size = 20, base_line_size = 0, base_rect_size = 0) +
theme(axis.text.x = element_text(face = "bold"), plot.margin = margin(1, 2, 0, 2, "cm") )
plot_colsbm_mesoiid <- function(fit, ord = NULL,  title = NULL, tag = NULL) {
#ord <- order(colSums(fit$alpha > .01) - rowSums(fit$alpha >.01)/2, decreasing = FALSE)
#  if(is.null(ord)) ord <- order(as.vector(fit$alpha %*% Reduce("+", fit$pi)/fit$M), decreasing = FALSE)
if(is.null(ord)) {
p <- gtools::permutations(nrow(fit$alpha),nrow(fit$alpha))
pi <- colMeans(Reduce("rbind", fit$tau))#Reduce("+", fit$pi)/fit$M
i <- which.min(sapply(
seq(nrow(p)),
function(x) sum((tcrossprod(pi) * fit$alpha)[p[x,],p[x,]][upper.tri(fit$alpha)])))
ord <- p[i,]
}
pi <- colMeans(Reduce("rbind", fit$tau))
p_alpha_pr_res <- (fit$alpha[ord, ord]*max(fit$delta)) %>% t() %>% reshape2::melt() %>%
mutate(xmax = rep(c(0,cumsum(pi[ord][1:(fit$Q-1)])), fit$Q),
xmin = rep(cumsum(pi[ord]), fit$Q),
ymax = rep(c(0,cumsum(pi[ord][1:(fit$Q-1)])), each = fit$Q),
ymin = rep(cumsum(pi[ord]), each = fit$Q)) %>%
ggplot(aes(xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax, fill = value)) +
geom_rect() +
scale_fill_gradient2(TeX("$\\alpha"), low = "white", mid = "red", midpoint = 1) +
geom_hline(yintercept = cumsum(pi[ord][1:(fit$Q-1)]), size = .2) +
geom_vline(xintercept = cumsum(pi[ord][1:(fit$Q-1)]), size = .2) +
scale_y_reverse() +
theme_bw(base_size = 15, base_rect_size = 1, base_line_size  = 1) +
xlab("") + ylab("") + coord_equal(expand = FALSE) +
theme(axis.ticks =  element_blank(),
axis.title = element_blank(), axis.text = element_blank()) +
labs(tag =  tag)
return(p_alpha_pr_res)
}
plot_colsbm_nomix <- function(fit, ord = NULL,  title = NULL, tag = NULL) {
if (fit$free_mixture) {pim <- fit$pi} else {pim <- fit$pim}
#ord <- order(colSums(fit$alpha > .01) - rowSums(fit$alpha >.01)/2, decreasing = FALSE)
#  if(is.null(ord)) ord <- order(as.vector(fit$alpha %*% Reduce("+", fit$pi)/fit$M), decreasing = FALSE)
if(is.null(ord)) {
p <- gtools::permutations(nrow(fit$alpha),nrow(fit$alpha))
i <- which.min(sapply(seq(nrow(p)),
function(x) sum(fit$alpha[p[x,],p[x,]][upper.tri(fit$alpha)])))
ord <- p[i,]
}
# ord <- order(rowSums(fit$alpha) - diag(fit$alpha), decreasing = FALSE)
p_alpha_pr_res <- fit$alpha[ord, ord] %>% t() %>%
reshape2::melt() %>%
ggplot(aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(Tex("$\\alpha"), low = "white", mid = "red", midpoint = 1) +
geom_hline(yintercept =  seq(fit$Q)+.5) +
geom_vline(xintercept =  seq(fit$Q)+.5) +
scale_y_reverse() +
theme_bw(base_size = 15, base_rect_size = 1, base_line_size  = 1) +
xlab("") + ylab("") + coord_fixed(expand = FALSE) +
labs(tag =  tag)
return(p_alpha_pr_res)
}
(plot_colsbm_mesoiid(fit_1, c(11, 9, 12, 3, 8, 5, 1, 2, 7, 6, 4, 10)) +
plot_colsbm_mesoiid(fit_21) +
plot_colsbm_mesoiid(fit_221) +
plot_colsbm_mesoiid(fit_2221) +
plot_colsbm_mesoiid(fit_2222) + plot_layout(guides = "collect", nrow = 1, ) + plot_annotation(tag_levels = "A") & theme(legend.position='none'))
library(latex2exp)
(plot_colsbm_mesoiid(fit_1, c(11, 9, 12, 3, 8, 5, 1, 2, 7, 6, 4, 10)) +
plot_colsbm_mesoiid(fit_21) +
plot_colsbm_mesoiid(fit_221) +
plot_colsbm_mesoiid(fit_2221) +
plot_colsbm_mesoiid(fit_2222) + plot_layout(guides = "collect", nrow = 1, ) + plot_annotation(tag_levels = "A") & theme(legend.position='none'))
(fit_full$Cpi[c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6),order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
reshape2::melt() %>%
rename(Block = Var1, Network = Var2) %>%
ggplot(aes(y = Block, x = Network, fill = 1*value)) +
geom_tile(show.legend = FALSE) +
geom_hline(yintercept = seq(0,12) + .5, size = .1) +
geom_vline(xintercept = seq(0,66) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "black") +
#scale_y_reverse() +
coord_flip() +
coord_fixed(expand = FALSE) +
theme_bw(base_size = 15)) +
(  plot_colsbm_mesoiid(fit_full, ord = #order(rowSums(fit_full$alpha)))#
c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6)))
(fit_full$Cpi[c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6),order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
reshape2::melt() %>%
rename(Block = Var1, Network = Var2) %>%
ggplot(aes(y = Block, x = Network, fill = 1*value)) +
geom_tile(show.legend = FALSE) +
geom_hline(yintercept = seq(0,12) + .5, size = .1) +
geom_vline(xintercept = seq(0,66) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "black") +
#scale_y_reverse() +
coord_flip(expand = FALSE) +
#  coord_fixed(expand = FALSE) +
theme_bw(base_size = 15)) +
(  plot_colsbm_mesoiid(fit_full, ord = #order(rowSums(fit_full$alpha)))#
c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6)))
(fit_full$Cpi[c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6),order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
reshape2::melt() %>%
rename(Block = Var1, Network = Var2) %>%
ggplot(aes(y = Block, x = Network, fill = 1*value)) +
geom_tile(show.legend = FALSE) +
geom_hline(yintercept = seq(0,12) + .5, size = .1) +
geom_vline(xintercept = seq(0,66) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "black") +
#scale_y_reverse() +
coord_flip(expand = FALSE) +
#  coord_fixed(expand = FALSE) +
theme_bw(base_size = 15)) +
(  plot_colsbm_mesoiid(fit_full, ord = #order(rowSums(fit_full$alpha)))#
c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6))) + plot_layout(widths = c(.24, .75))
fit_full$Cpi[5,]
fit_full$alpha[5,]
fit_full$alpha[5,] %>% round(2)
fit_full$alpha[,5] %>% round(2)
Reduce(`+`, fit_full$pi)
Reduce(`+`, fit_full$pi)[5]
Reduce(`+`, fit_full$pi)[5]/67
(fit_full$Cpi[c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6),order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
reshape2::melt() %>%
rename(Block = Var1, Network = Var2) %>%
ggplot(aes(y = Block, x = Network, fill = 1*value)) +
geom_tile(show.legend = FALSE) +
geom_hline(yintercept = seq(0,12) + .5, size = .1) +
geom_vline(xintercept = seq(0,66) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "black") +
#scale_y_reverse() +
coord_flip(expand = FALSE) +
#  coord_fixed(expand = FALSE) +
theme_bw(base_size = 15)) +
(  plot_colsbm_mesoiid(fit_full, ord = #order(rowSums(fit_full$alpha)))#
c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6))) + plot_layout(widths = c(.2, .8))
#fit_full$Cpi[order(rowSums(fit_full$alpha)), order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
p_ff_graphon <- (fit_full$Cpi[c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6),order(colSums(fit_full$Cpi), decreasing = TRUE)] %>%
reshape2::melt() %>%
rename(Block = Var1, Network = Var2) %>%
ggplot(aes(y = Block, x = Network, fill = 1*value)) +
geom_tile(show.legend = FALSE) +
geom_hline(yintercept = seq(0,12) + .5, size = .1) +
geom_vline(xintercept = seq(0,66) + .5, size = .1) +
scale_fill_gradient(low = "white", high = "black") +
#scale_y_reverse() +
coord_flip(expand = FALSE) +
#  coord_fixed(expand = FALSE) +
theme_bw(base_size = 15)) +
(  plot_colsbm_mesoiid(fit_full, ord = #order(rowSums(fit_full$alpha)))#
c(5, 7, 4, 3, 1, 2, 12, 10, 13, 11, 8, 9, 6))) + plot_layout(widths = c(.2, .8))
ggsave(filename = "Documents/colsbm/network_consensus/article/rmangal_full_graphon.png", plot = p_ff_graphon,
width = 12, height = 8)
ggsave(filename = "~/Documents/r_package/network_consensus/article/collection/rmangal_full_graphon.png", plot = p_ff_graphon,
width = 12, height = 8)
ggsave(filename = "~/Documents/r_package/network_consensus/article/collection/rmangal_full_graphon.png", plot = p_ff_graphon,
width = 14, height = 8)
directed_net <- sapply(predation_networks, function(net) isSymmetric(as_adj(as.igraph(net), sparse = FALSE)))
load("~/Documents/r_package/network_consensus/article/code/application/rmangal_classification/rmangal_predation_networks.RData")
directed_net <- sapply(predation_networks, function(net) isSymmetric(as_adj(as.igraph(net), sparse = FALSE)))
## Plots and analysis of the Rmangal collection with pi-colSBM.
##
library(rmangal)
## Plots and analysis of the Rmangal collection with pi-colSBM.
##
library(rmangal)
library(igraph)
library(tidyverse)
library(colSBM)
library(bettermc)
library(patchwork)
library(latex2exp)
directed_net <- sapply(predation_networks, function(net) isSymmetric(as_adj(as.igraph(net), sparse = FALSE)))
nb_nodes <- sapply(predation_networks, function(net) nrow(net$nodes))
table(sapply(predation_networks[directed_net == FALSE & nb_nodes > 30], function(net) net$dataset$dataset_id))
net_30plus <- predation_networks[directed_net == FALSE & nb_nodes > 30]
table(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id))
sapply(net_30plus[2:68], function(net) net$dataset$dataset_id)
net_id <- sapply(net_30plus[2:68], function(net) net$network$network_id)
rm(predation_networks, predation_interactions)
A_30plus <- lapply(net_30plus[2:68], function(net) {
A <- as_adj(as.igraph(net), sparse = FALSE)
A[A > 1] <- 1
A
}
)
saveRDS(A_30plus, file = "../mangal_matrices.rds")
load("~/Documents/r_package/network_consensus/article/code/application/rmangal_classification/res_picolsbm_rmangal.RData")
fit_1$net_id
df_dataset <- data.frame(net_id = fit_1$net_id,
group = 1) %>%
bind_rows(data.frame(net_id = fit_21$net_id,
group = 2)) %>%
bind_rows(data.frame(net_id = fit_221$net_id,
group = 3)) %>%
bind_rows(data.frame(net_id = fit_2221$net_id,
group = 4)) %>%
bind_rows(data.frame(net_id = fit_2222$net_id,
group = 5))
df_dataset
df_dataset  <- df_dataset %>% full_join(data.frame(net_id = net_id,
dataset =sapply(net_30plus[2:68], function(net) net$dataset$dataset_id) ))
df_dataset
net_id
order(net_id)
net_id
df_dataset$net_id
net_id
sapply(seq(67), function(i) which(net_id == df_dataset$net_id[i]))
df_dataset %>% mutate(mat_order = sapply(seq(67), function(i) which(net_id == .$net_id[i])))
df_dataset %>% mutate(mat_order = sapply(seq(67), which(net_id ==.$net_id))
)
df_dataset %>% mutate(mat_order = sapply(seq(67), which(net_id ==net_id)))
ord_mat <- sapply(seq(67), function(i) which(net_id == df_dataset$net_id[i]))
df_dataset %>% mutate(mat_order = ord_mat)
df_dataset <- df_dataset %>% mutate(mat_order = ord_mat)
saveRDS(df_dataset, file = "../grou_id.rds")
load("~/Documents/r_package/network_consensus/article/code/application/rmangal_classification/res_picolsbm_rmangal.RData")
load("~/Documents/r_package/network_consensus/article/code/application/rmangal_classification/rmangal_predation_networks.RData")
library(rmangal)
library(igraph)
library(tidyverse)
library(colSBM)
library(bettermc)
library(patchwork)
library(latex2exp)
# predation_interactions <- se
directed_net <- sapply(predation_networks, function(net) isSymmetric(as_adj(as.igraph(net), sparse = FALSE)))
nb_nodes <- sapply(predation_networks, function(net) nrow(net$nodes))
table(sapply(predation_networks[directed_net == FALSE & nb_nodes > 30], function(net) net$dataset$dataset_id))
net_30plus <- predation_networks[directed_net == FALSE & nb_nodes > 30]
table(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id))
sapply(net_30plus[2:68], function(net) net$dataset$dataset_id)
net_id <- sapply(net_30plus[2:68], function(net) net$network$network_id)
rm(predation_networks, predation_interactions)
A_30plus <- lapply(net_30plus[2:68], function(net) {
A <- as_adj(as.igraph(net), sparse = FALSE)
A[A > 1] <- 1
A
}
)
sort(sapply(A_30plus, function(A) sum(A)/(nrow(A)**2 - nrow(A))))
sum(sapply(A_30plus, function(A) sum(A)))
gc()
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 48))]
df_dataset[df_dataset$dataset ==48,] # (site A and C for group 3, site B for group 2 and 4)
df_dataset <- data.frame(net_id = fit_1$net_id,
group = 1) %>%
bind_rows(data.frame(net_id = fit_21$net_id,
group = 2)) %>%
bind_rows(data.frame(net_id = fit_221$net_id,
group = 3)) %>%
bind_rows(data.frame(net_id = fit_2221$net_id,
group = 4)) %>%
bind_rows(data.frame(net_id = fit_2222$net_id,
group = 5))
df_dataset  <- df_dataset %>% full_join(data.frame(net_id = net_id,
dataset =sapply(net_30plus[2:68], function(net) net$dataset$dataset_id) ))
table(LETTERS[df_dataset$group], df_dataset$dataset)
#=================================================================
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 48))]
df_dataset[df_dataset$dataset ==48,] # (site A and C for group 3, site B for group 2 and 4)
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 88))]
df_dataset[df_dataset$dataset ==88,] #
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 95))]
df_dataset[df_dataset$dataset ==95,] # (different types of soils)
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 115))]
df_dataset[df_dataset$dataset == 115,] # (rotting oak logs for group 2, rotting pine logs for group 4)
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 144))]
df_dataset[df_dataset$dataset == 144,] #
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 153))]
df_dataset[df_dataset$dataset ==153,] # Different model for food web structure
net_30plus[2:68][which(sapply(net_30plus[2:68], function(net) net$dataset$dataset_id == 157))]
df_dataset[df_dataset$dataset ==157,] # Creek for group 2 and stream for group 4
fit_1$n
fit_21$n
fit_21$Q
fit_21$e
fit_1$e
fit_1$e/fit_1$nb_inter
fit_11$e/fit_11$nb_inter
fit_21$e/fit_21$nb_inter
fit_21$Cpi
sum(!fit_21$Cpi)
sum(!fit_21$Cpi)/(8*25)
sum(!fit_1$Cpi)
rowSums(!fit_1$Cpi)
colSums(!fit_1$Cpi)
colSums(!fit_221$Cpi)
fit_21$e/fit_21$nb_inter
sort(fit_21$e/fit_21$nb_inter)
sort(fit_221$e/fit_221$nb_inter)
sort(fit_2221$e/fit_2221$nb_inter)
sort(fit_22222e/fit_2222$nb_inter)
sort(fit_22222$e/fit_2222$nb_inter)
sort(fit_2222$e/fit_2222$nb_inter)
sort(fit_21$e/fit_21$nb_inter)
sort(fit_1$e/fit_1$nb_inter)
fit_1$Q
fit_21$Q
fit_221$Q
fit_2221$Q
fit_2222$Q
sort(fit_1$n)
sort(fit_21$n)
sort(fit_221$n)
sort(fit_2221$n)
sort(fit_2222$n)
max(fit_1$alpha)
max(fit_21$alpha)
max(fit_22$alpha)
max(fit_22$1alpha)
max(fit_221$alpha)
max(fit_2221$alpha)
max(fit_2222$alpha)
max(diag(fit_2222$alpha))
max(diag(fit_2221$alpha))
max(diag(fit_221$alpha))
max(diag(fit_21$alpha))
max(diag(fit_1$alpha))
diag(fit_1$alpha)
fit_list <- list(fit_1, fit_21, fit_221, fit_2221, fit_2222)
fit_list %>% sapply(function(x) diag(x$alpha))
fit_list %>% sapply(function(x) sort(diag(x$alpha)))
fit_list %>% sapply(function(x) sort(diag(x$alpha)) |> round(2))
fit_list %>% sapply(function(x) sort(rowMeans(x$alpha)) |> round(2))
fit_list %>% sapply(function(x) sort(colMeans(x$alpha)) |> round(2))
fit_list %>% sapply(function(x) apply(x, 2, "max") ) |> round(2))
fit_list %>% sapply(function(x) apply(x$alpha, 2, "max")) |> round(2))
fit_list %>% sapply(function(x) apply(x$alpha, 2, "max")) |> round(2)
fit_list %>% sapply(function(x) apply(x$alpha, 2, "max)) |> round(2)
fit_list %>% sapply(function(x) apply(x$alpha, 2, max)) |> round(2)
fit_list %>% sapply(function(x) apply(x$alpha, 2, max)) |> round(2)
fit_list %>% sapply(function(x) apply(x$alpha, 2, max))
fit_list %>% sapply(function(x) apply(x$alpha, 2, max) |> round(2))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 2, max)) |> round(2))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 1, max)) |> round(2))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 2, min)) |> round(2))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 1, max) - diag(x$alpha)) |> round(2))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 1, max) - diag(x$alpha)) |> round(3))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 1, max)  |> round(3))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 1, max))  |> round(3))
fit_list %>% sapply(function(x) sort(apply(x$alpha, 1, max))  |> round(3))
fit_list %>% sapply(function(x) {x <- x$alpha; diag(x) <- 0; sort(apply(x, 1, max)})  |> round(3))
fit_list %>% sapply(function(x) {x <- x$alpha; diag(x) <- 0; sort(apply(x, 1, max))  |> round(3)})
fit_list %>% sapply(function(x) {diag(x$alpha))  |> round(3)})
fit_list %>% sapply(function(x) {diag(x$alpha)  |> round(3)})
fit_list %>% sapply(function(x) {sort(diag(x$alpha))  |> round(3)})
icl_sbm
library(colSBM)
library(colSBM)
library(colSBM)
