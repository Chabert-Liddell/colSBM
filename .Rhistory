### ADD R FUNCTIONS AND THEIR DOCUMENTATION
#use_r("name_of_r_file")
# Code > Insert Roxygen Skeleton (Ctrl+Alt+Shift+R)
use_data_raw()
## code to prepare `DATASET` dataset goes here
my_files <- dir(path = "~/Documents/ecological_network/data/food_web/")
my_files <- my_files[1:(length(my_files)-2)]
food_webs <- lapply(
X = seq_along(my_files),
FUN = function(i) {
df <- read.csv(file = paste0("~/Documents/ecological_network/data/food_web/",
my_files[i]), header = TRUE, row.names = 1)
A <- as.matrix(df)
return(list(
net = A,
nr = nrow(A),
nc = ncol(A),
dens = mean(A),
id = stringr::str_sub(my_files[i], 1, -5))
)
}
)
sub_fw <- map(food_webs, "net")[11:18]
sub_fw <- purrr::map(food_webs, "net")[11:18]
sub_id <- purrr::map_chr(food_webs, "id")[11:18]
site_names <- c("M_Martins", "NC_Cooper", "NC_Herlzier", "NZ_Venlaw",
"NZ_Berwick", "NZ_North_Col", "NZ_Powder", "NZ_Trib_C" )
food_webs
foodwebs <- sub_fw
foodwebs
names(foodwebs) <- site_names
names(foodwebs)
foodwebs[1]
usethis::use_data(foodwebs, overwrite = TRUE)
use_r("data")
use_vignette("tutorial", "Tutorial on food webs")
library(colSBM)
=======
library(colSBM)
use_package("bettermc")
library(usethis)
use_package("bettermc")
use_package("ggplot2")
use_package("purrr")
use_package("dplyr")
library(colSBM)
library(colSBM)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
data("foodwebs")
# Chunk 3
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
global_opts = list(nb_cores = 1L,
nb_models = 5L,
nb_init = 10L,
depth = 2L,
verbosity = 2, spectral_init = FALSE,
<<<<<<< HEAD
Q_max = 8L, plot_details = 0)
res_fw_iid <- estimate_colSBM(netlist = food_webs[1:3],
colsbm_model = "iid",
net_id = names(food_webs)[1:3],
nb_run = 5L,
global_opts = global_opts)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
net_id = names(foodwebs)[1:3],
nb_run = 5L,
global_opts = global_opts)
use_r("generic-function")
res_fw_iid$ICL_clustering
res_fw_iid$net_id
res_fw_iid$best_fit
res_fw_iid$best_fit$alpha
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
net_id = names(foodwebs)[1:3],
nb_run = 5L,
global_opts = global_opts)
=======
Q_max = 8L, plot_details = 1)
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
directed = TRUE,
net_id = names(foodwebs)[1:3],
nb_run = 3L,
global_opts = global_opts)
# Chunk 4
res_fw_iid$ICL_clustering
plot(res_fw_iid)
plot(res_fw_iid$best_fit)
library(colSBM)
plot(res_fw_iid$best_fit)
plot(res_fw_iid$best_fit, ord = c(3,4,5,2,1))
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
data("foodwebs")
# Chunk 3
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
global_opts = list(nb_cores = 1L,
nb_models = 5L,
nb_init = 10L,
depth = 2L,
verbosity = 2, spectral_init = FALSE,
Q_max = 8L, plot_details = 1)
<<<<<<< HEAD
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
net_id = names(foodwebs)[1:3],
nb_run = 5L,
global_opts = global_opts)
=======
set.seed(1234)
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
directed = TRUE,
net_id = names(foodwebs)[1:3],
<<<<<<< HEAD
nb_run = 5L,
global_opts = global_opts)
res_fw_iid$ICL_clustering
library(colSBM)
plot(res_fw_iid$best_fit)
library(colSBM)
plot(res_fw_iid$best_fit)
res_fw_iid$best_fit$plot()
res_fw_iid$best_fit
library(colSBM)
res_fw_iid$best_fit
res_fw_iid$best_fit$plot()
library(colSBM)
res_fw_iid$best_fit$plot()
library(colSBM)
res_fw_iid$best_fit$plot()
plot(res_fw_iid)
=======
nb_run = 3L,
global_opts = global_opts)
# Chunk 4
res_fw_iid$ICL_clustering
plot(res_fw_iid$best_fit, type = "graphon", ord = c(3,4,5,2,1))
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "block")
library(colSBM)
plot(res_fw_iid$best_fit, type = "graphon", ord = c(3,4,5,2,1))
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "block")
plot(res_fw_iid$best_fit, type = "graphon", ord = c(3,4,5,2,1))
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "block")
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
data("foodwebs")
# Chunk 3
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
global_opts = list(nb_cores = 1L,
nb_models = 5L,
nb_init = 10L,
depth = 2L,
verbosity = 2, spectral_init = FALSE,
Q_max = 8L, plot_details = 1)
<<<<<<< HEAD
=======
set.seed(1234)
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
directed = TRUE,
net_id = names(foodwebs)[1:3],
<<<<<<< HEAD
nb_run = 5L,
global_opts = global_opts)
plot(res_fw_iid)
plot(res_fw_iid$best_fit)
library(colSBM)
=======
nb_run = 3L,
global_opts = global_opts)
# Chunk 4
res_fw_iid$ICL_clustering
plot(res_fw_iid$best_fit, type = "graphon", ord = c(3,4,5,2,1))
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "block")
use_package("patchwork")
library(colSBM)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
data("foodwebs")
# Chunk 3
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
global_opts = list(nb_cores = 1L,
nb_models = 5L,
nb_init = 10L,
depth = 2L,
verbosity = 2, spectral_init = FALSE,
Q_max = 8L, plot_details = 1)
<<<<<<< HEAD
=======
set.seed(1234)
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
directed = TRUE,
net_id = names(foodwebs)[1:3],
nb_run = 3L,
global_opts = global_opts)
<<<<<<< HEAD
res_fw_iid$ICL_clustering
plot(res_fw_iid$best_fit)
library(colSBM)
=======
# Chunk 4
res_fw_iid$ICL_clustering
plot(res_fw_iid$best_fit, type = "graphon", ord = c(3,4,5,2,1))
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "block")
res_fw_iid$best_fit$A
res_fw_iid$best_fit$A[[1]]
library(colSBM)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
data("foodwebs")
# Chunk 3
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
global_opts = list(nb_cores = 1L,
nb_models = 5L,
nb_init = 10L,
depth = 2L,
verbosity = 2, spectral_init = FALSE,
Q_max = 8L, plot_details = 1)
<<<<<<< HEAD
=======
set.seed(1234)
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
directed = TRUE,
net_id = names(foodwebs)[1:3],
nb_run = 3L,
global_opts = global_opts)
<<<<<<< HEAD
res_fw_iid$ICL_clustering
plot(res_fw_iid$best_fit)
plot(res_fw_iid$best_fit, ord = c(2,1,3,4,5))
plot(res_fw_iid$best_fit, ord = c(4,5,3,2,1))
library(colSBM)
plot(res_fw_iid$best_fit, ord = c(4,5,3,2,1))
plot(res_fw_iid$best_fit, ord = c(2,1,3,4,5))
plot(res_fw_iid$best_fit, ord = c(2,5,1,3,4))
plot(res_fw_iid$best_fit, ord = c(5,1,3,4,2))
plot(res_fw_iid$best_fit, ord = c(2,5,1,3,4))
plot(res_fw_iid$best_fit, ord = c(2,3,4,5,1))
plot(res_fw_iid$best_fit, ord = c(1,2,3,4,5))
plot(res_fw_iid$best_fit, ord = c(1,4,2,3,5))
plot(res_fw_iid$best_fit, ord = c(1,2,4,3,5))
plot(res_fw_iid$best_fit, ord = c(1,3,4,2,5))
plot(res_fw_iid$best_fit, ord = c(1,4,3,2,5))
plot(res_fw_iid$best_fit, ord = c(4,1,3,2,5))
=======
# Chunk 4
res_fw_iid$ICL_clustering
plot(res_fw_iid$best_fit, type = "graphon", ord = c(3,4,5,2,1))
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "block")
plot(res_fw_iid$best_fit, type = "meso")
plot(res_fw_iid$best_fit, type = "meso", mixture = TRUE)
?pivot_longer
?pivot_longer()
??pivot_longer()
use_package("tidyr")
self$A[[net_id]][order(self$Z[[net_id]]),
order(self$Z[[net_id]])] %>% t() %>%
reshape2::melt() %>%
ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(self$Z[[net_id]])[1:(self$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(self$Z[[net_id]])[1:(self$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(self$net_id[net_id]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "") +
ggplot2::scale_y_reverse() +
# scale_y_discrete(limits = rev, breaks = "",#label = rev(custom_lab3),
#                  guide = guide_axis(angle = 0) ) +
ggplot2::coord_equal(expand = FALSE) +
ggplot2::theme_bw(base_size = 15) +
ggplot2::theme(axis.ticks =  ggplot2::element_blank())
fit <- res_fw_iid$best_fit
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt()
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5)
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[net_id]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(self$net_id[net_id])
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(self$net_id[net_id])
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1])
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")+
ggplot2::scale_y_reverse()
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")+
scale_y_discrete(limits = rev, breaks = "",#label = rev(custom_lab3),
guide = guide_axis(angle = 0) )
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")+
ggplot2::scale_y_discrete(limits = rev, breaks = "",#label = rev(custom_lab3),
guide = guide_axis(angle = 0) )
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")+
ggplot2::scale_y_discrete(limits = rev, breaks = "",#label = rev(custom_lab3),
guide = ggplot2::guide_axis(angle = 0) )
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")+
ggplot2::scale_y_discrete(limits = rev, breaks = "",#label = rev(custom_lab3),
guide = ggplot2::guide_axis(angle = 0) )  +
ggplot2::coord_equal(expand = FALSE) +
ggplot2::theme_bw(base_size = 15) +
ggplot2::theme(axis.ticks =  ggplot2::element_blank()
)
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>% t() %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")+
ggplot2::scale_y_discrete(limits = rev, breaks = "",#label = rev(custom_lab3),
guide = ggplot2::guide_axis(angle = 0) )  +
ggplot2::coord_equal(expand = FALSE) +
ggplot2::theme_bw(base_size = 15) +
ggplot2::theme(axis.ticks =  ggplot2::element_blank())
fit$A[[1]][order(fit$Z[[1]]),
order(fit$Z[[1]])] %>%
reshape2::melt() %>%       ggplot2::ggplot(ggplot2::aes(x = Var2, y = Var1, fill = value)) +
ggplot2::geom_tile(show.legend = FALSE) +
ggplot2::geom_hline(yintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::geom_vline(xintercept = cumsum(tabulate(fit$Z[[1]])[1:(fit$Q-1)])+.5,
col = "red", size = .5) +
ggplot2::scale_fill_gradient(low = "white", high = "black") +
ggplot2::ylab("") + ggplot2::xlab(fit$net_id[1]) +
ggplot2::scale_x_discrete(#limits = rev,
breaks = "")+
ggplot2::scale_y_discrete(limits = rev, breaks = "",#label = rev(custom_lab3),
guide = ggplot2::guide_axis(angle = 0) )  +
ggplot2::coord_equal(expand = FALSE) +
ggplot2::theme_bw(base_size = 15) +
ggplot2::theme(axis.ticks =  ggplot2::element_blank())
library(colSBM)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
data("foodwebs")
# Chunk 3
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
global_opts = list(nb_cores = 1L,
nb_models = 5L,
nb_init = 10L,
depth = 2L,
verbosity = 2, spectral_init = FALSE,
Q_max = 8L, plot_details = 1)
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
directed = TRUE,
net_id = names(foodwebs)[1:3],
nb_run = 3L,
global_opts = global_opts)
<<<<<<< HEAD
res_fw_iid$ICL_clustering
plot(res_fw_iid$best_fit, ord = c(4,1,3,2,5))
plot(res_fw_iid$best_fit, ord = c(4,5,3,2,1))
plot(res_fw_iid$best_fit, ord = c(3,4,5,2,1))
=======
# Chunk 4
res_fw_iid$ICL_clustering
>>>>>>> fc1a3a70405cdd9ac6b8aa1ad05f8e6cdc1ca8c7
sample.int(c(1,2), prob = c(.01, .02))
sample.int(2, prob = c(.01, .02))
library(colSBM)
