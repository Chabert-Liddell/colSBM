devtools::document()
library(colSBM)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
library(patchwork)
data("foodwebs")
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3],
colsbm_model = "iid",
directed = TRUE,
net_id = names(foodwebs)[1:3],
nb_run = 1L,
global_opts = list(verbosity = 1L))
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3], # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = names(foodwebs)[1:3], # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 1L,
Q_max = 8) #Max number of clusters
)
plot(res_fw_iid)
res_fw_iid$ICL_sbm
set.seed(1234)
net_clust <- network_clustering(netlist = foodwebs[c(2,3,5,8)], # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = names(foodwebs)[c(2,3,5,8)], # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 1L,
Q_max = 9) #Max number of clusters
)
library(colSBM)
net_clust <- clusterize_networks(netlist = foodwebs[c(2,3,5,8)], # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = names(foodwebs)[c(2,3,5,8)], # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 1L,
Q_max = 9) #Max number of clusters
)
alpha <- matrix(c(.05, .01, .01, .01,
.1, .05, .01, .01,
.2, .4, .05, .01,
.1, .8, .1, .05), 4, 4, byrow = TRUE)
alpha
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)
alpha <- matrix(c(.05, .01, .01, .01,
.3, .05, .01, .01,
.5, .4, .05, .01,
.1, .8, .1, .05), 4, 4, byrow = TRUE)
pi <- c(.1, .2, .6, .1)
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)
sim_net <-
Replicate(3, sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)$rNetwork)
sim_net <-
replicate(3, sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)$rNetwork)
sim_net
sim_net[[1]]
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)$rnetwork
X <-
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)
X$rNetwork
X
X$networkData
sim_net <-
replicate(3,
{X <-
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)
X$rNetwork
X$networkData})
sim_net
net_clust <- clusterize_networks(netlist = c(foodwebs[1:3], sim_net), # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = c(names(foodwebs)[1:3], "sim1", "sim2", "sim3"), # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 2L,
Q_max = 9) #Max number of clusters
)
c(foodwebs[1:3], sim_net)
str(sim_net)
sim_net <-
replicate(3,
{X <-
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)
X$rNetwork
X$networkData}, simplify = FALSE)
net_clust <- clusterize_networks(netlist = c(foodwebs[1:3], sim_net), # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = c(names(foodwebs)[1:3], "sim1", "sim2", "sim3"), # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 2L,
Q_max = 9) #Max number of clusters
)
net_clust
net_clust[[1]]
net_clust[[2]]
net_clust[[1]]$Cpi
!net_clust[[1]]$Cpi
net_clust[[2]]
plot(net_clust[[3]]$best_fit, type = "graphon")
plot(net_clust[[3]], type = "graphon")
plot(net_clust[[3]], type = "graphon", ord = c(1,3,2,4))
plot(net_clust[[3]], type = "graphon", ord = c(1,2,3,4))
net_clust[[3]]$alpha
plot(net_clust[[3]], type = "graphon", ord = c(3,2,4,1))
plot(net_clust[[3]], type = "graphon", ord = c(3,2,1,4))
colSBM:::best_list(net_clust)
length(net_clust)
length(net_clust[[2]])
length(net_clust[[3]])
length(net_clust[3])
colSBM:::best_list(net_clust)
library(colSBM)
library(colSBM)
devtools::document()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
library(patchwork)
data("foodwebs")
# Chunk 3
# global_opts = list(nb_cores = 1L,
#                    nb_models = 5L,
#                    nb_init = 10L,
#                    depth = 2L,
#                    verbosity = 1,
#                    spectral_init = FALSE,
#                    Q_max = 8L,
#                    plot_details = 1)
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3], # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = names(foodwebs)[1:3], # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 1L,
Q_max = 8) #Max number of clusters
)
plot(res_fw_iid)
plot.bmpop(res_fw_iid)
library(colSBM)
library(colSBM)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
library(patchwork)
data("foodwebs")
# Chunk 3
# global_opts = list(nb_cores = 1L,
#                    nb_models = 5L,
#                    nb_init = 10L,
#                    depth = 2L,
#                    verbosity = 1,
#                    spectral_init = FALSE,
#                    Q_max = 8L,
#                    plot_details = 1)
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3], # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = names(foodwebs)[1:3], # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 1L,
plot_detail = 0,
Q_max = 8) #Max number of clusters
)
library(colSBM)
library(colSBM)
library(colSBM)
set.seed(1234)
net_clust <- clusterize_networks(netlist = c(foodwebs[1:3], sim_net), # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = c(names(foodwebs)[1:3], "sim1", "sim2", "sim3"), # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 2L,
Q_max = 9) #Max number of clusters
)
best_partition <- extract_best_partition(net_clust)
net_clust
net_clust[[1]]
inherits(net_clust[[1]])
class(net_clust[[1]])
library(colSBM)
library(colSBM)
devtools::document()
devtools::document()
library(colSBM)
devtools::document()
library(colSBM)
library(colSBM)
devtools::document()
library(colSBM)
devtools::document()
library(colSBM)
library(colSBM)
??clusterize_networks
devtools::document()
library(colSBM)
??clusterize_networks
library(colSBM)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(colSBM)
library(patchwork)
data("foodwebs")
# Chunk 3
# global_opts = list(nb_cores = 1L,
#                    nb_models = 5L,
#                    nb_init = 10L,
#                    depth = 2L,
#                    verbosity = 1,
#                    spectral_init = FALSE,
#                    Q_max = 8L,
#                    plot_details = 1)
set.seed(1234)
res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3], # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = names(foodwebs)[1:3], # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 1L,
plot_detail = 0,
Q_max = 8) #Max number of clusters
)
# Chunk 4
plot(res_fw_iid)
best_fit <- res_fw_iid$best_fit
# Chunk 5
best_fit
# Chunk 6
best_fit$parameters
# Chunk 7
best_fit$Z
# Chunk 8
best_fit$pred_dyads[[3]]
# Chunk 9: plot-block
plot(res_fw_iid$best_fit, type = "block", net_id = 1) +
plot(res_fw_iid$best_fit, type = "block", net_id = 2) +
plot(res_fw_iid$best_fit, type = "block", net_id = 3)
# Chunk 10
plot(res_fw_iid$best_fit, type = "graphon")
plot(res_fw_iid$best_fit, type = "meso", mixture = TRUE)
# Chunk 11
set.seed(1234)
alpha <- matrix(c(.05, .01, .01, .01,
.3, .05, .01, .01,
.5, .4, .05, .01,
.1, .8, .1, .05), 4, 4, byrow = TRUE)
pi <- c(.1, .2, .6, .1)
sim_net <-
replicate(3,
{X <-
sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),
directed = TRUE)
X$rNetwork
X$networkData}, simplify = FALSE)
# Chunk 12
set.seed(1234)
net_clust <- clusterize_networks(netlist = c(foodwebs[1:3], sim_net), # A list of networks
colsbm_model = "iid", # The name of the model
directed = TRUE, # Foodwebs are directed networks
net_id = c(names(foodwebs)[1:3], "sim1", "sim2", "sim3"), # Name of the networks
nb_run = 1L, # Nmber of runs of the algorithm
global_opts = list(verbosity = 2L,
Q_max = 9) #Max number of clusters
)
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- stats::rbinom(15*15, 1, p[[1]])
})
Net
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- stats::rbinom(15*14/2, 1, p[[1]])
})
Net
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A, diag=FALSE)] <- stats::rbinom(15*14/2, 1, p[[1]])
A[upper.tri(A, diag = FALSE)] <- t(A[lower.tri(A, diag = FALSE)])
})
Net
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A, diag=FALSE)] <- stats::rbinom(15*14/2, 1, p[[1]])
})
Net
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A] <- stats::rbinom(15*14/2, 1, p[[1]])
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)] <- stats::rbinom(15*14/2, 1, p[[1]])
A
})
Net
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)] <- stats::rbinom(15*14/2, 1, p[[1]])
A <- A + t(A)
})
Net
isSymmetric.matrix(A[[1]])
isSymmetric.matrix(net[[1]])
isSymmetric.matrix(Net[[1]])
isSymmetric.matrix(Net[[2]])
isSymmetric.matrix(Net[[3]])
best_partition <- extract_best_partition(net_clust)
plot(net_clust[[1]])
plot(best_partition[[1]], type = "graphon")  +
plot(best_partition[[2]], type = "graphon")
plot(best_partition[[1]], type = "graphon")  +
plot(best_partition[[2]], type = "graphon", ord = c(4, 2, 3, 1))
best_partition[[2]]$alpha
order(rowSums(best_partition[[2]]$alpha))
plot(best_partition[[1]], type = "graphon",
ord = order(rowSums(best_partition[[1]]$alpha)))  +
plot(best_partition[[2]], type = "graphon",
ord = order(rowSums(best_partition[[2]]$alpha)))
plot(best_partition[[1]], type = "graphon",
ord = order(best_partition[[1]]$alpha %*% best_partition[[1]]$pi[[1]]))  +
plot(best_partition[[2]], type = "graphon",
ord = order(best_partition[[2]]$alpha %*% best_partition[[2]]$pi[[1]]))
plot(net_clust[[1]],
ord = order(net_clust[[1]]$alpha %*% net_clust[[1]]$pi[[1]]))
library(colSBM)
devtools::document()
library(colSBM)
diff(c(2,1))
diff(c(1,2))
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)] <- stats::rbinom(15*14/2, 1, p[[1]])
A <- A + t(A)
})
cl <- clusterize_networks(Net,
colsbm_model = "iid",
directed = FALSE,
model = "bernoulli",
nb_run = 1,
fit_opts = list(Q_max = 1,
nb_models = 1))
cl
test_that("clusterize_networks_iid",
expect_equal(
{Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)] <- stats::rbinom(15*14/2, 1, p[[l]])
A <- A + t(A)
})
cl <- clusterize_networks(Net,
colsbm_model = "iid",
directed = FALSE,
model = "bernoulli",
nb_run = 1,
fit_opts = list(Q_max = 1,
nb_models = 1,
depth = 1))
c(diff(cl[[2]]$net_list), diff(cl[[3]]$net_list))},
c(1,1)
)
)
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)] <- stats::rbinom(15*14/2, 1, p[[l]])
A <- A + t(A)
})
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)] <- stats::rbinom(15*14/2, 1, p)
A <- A + t(A)
})
cl <- clusterize_networks(Net,
colsbm_model = "iid",
directed = FALSE,
model = "bernoulli",
nb_run = 1,
fit_opts = list(Q_max = 1,
nb_models = 1,
depth = 1))
cl
cl <- clusterize_networks(Net,
colsbm_model = "iid",
directed = FALSE,
model = "bernoulli",
nb_run = 1,
fit_opts = list(Q_max = 2,
nb_init = 1,
nb_models = 1,
depth = 1, ))
cl <- clusterize_networks(Net,
colsbm_model = "iid",
directed = FALSE,
model = "bernoulli",
nb_run = 1,
fit_opts = list(Q_max = 2,
nb_init = 2,
nb_models = 1,
depth = 1, ))
cl <- clusterize_networks(Net,
colsbm_model = "iid",
directed = FALSE,
model = "bernoulli",
nb_run = 1,
fit_opts = list(Q_max = 2,
nb_init = 1,
nb_models = 1,
depth = 1))
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)] <- stats::rbinom(15*14/2, 1, p)
A <- A + t(A)
})
set.seed(1234)
cl <- clusterize_networks(Net,
colsbm_model = "iid",
directed = FALSE,
model = "bernoulli",
nb_run = 1,
fit_opts = list(Q_max = 2,
nb_init = 1,
nb_models = 1,
depth = 1))
c(diff(cl[[2]]$net_id), diff(cl[[3]]$net_id)
)
c(diff(cl[[2]]$net_id), diff(cl[[3]]$net_id))}
c(diff(cl[[2]]$net_id), diff(cl[[3]]$net_id))
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)][sample(15*14/2, size = round(p*15*14*2))] <- 1
A <- A + t(A)
})
Net <- lapply(list(.7, .7, .2, .2),
function(p) {
A <- matrix(0, 15, 15 )
A[lower.tri(A)][sample(15*14/2, size = round(p*15*14/2))] <- 1
A <- A + t(A)
})
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_version(which = "minor")
plot(best_partition[[1]], type = "graphon",
ord = order(best_partition[[1]]$alpha %*% best_partition[[1]]$pi[[1]]))  +
plot(best_partition[[2]], type = "graphon",
ord = order(best_partition[[2]]$alpha %*% best_partition[[2]]$pi[[1]]))
plot(best_partition[[1]], type = "graphon",
ord = order(best_partition[[1]]$alpha %*% best_partition[[1]]$pi[[1]]))  +
plot(best_partition[[2]], type = "graphon",
ord = order(best_partition[[2]]$alpha %*% best_partition[[2]]$pi[[1]])) +
plot_layout(guides = "collect")
plot(best_partition[[1]], type = "graphon",
ord = order(best_partition[[1]]$alpha %*% best_partition[[1]]$pi[[1]]))  +
plot(best_partition[[2]], type = "graphon",
ord = order(best_partition[[2]]$alpha %*% best_partition[[2]]$pi[[1]])) +
plot_layout(guides = "collect") + plot_annotation(tag_levels = "1")
lobstr::obj_sizes(net_clust)
devtools::check()
devtools::check(cran = TRUE)
devtools::document()
usethis::edit_r_buildignore()
library(colSBM)
devtools:::test_coverage()
devtools:::test_coverage()
library(colSBM)
devtools::check(cran = TRUE)
rhub::check_for_cran()
library(colSBM)
rhub::check_for_cran()
