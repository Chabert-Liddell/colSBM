[{"path":"https://chabert-liddel.github.io/colSBM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Saint-Clair Chabert-Liddell Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial-bipartite.html","id":"estimation-with-colsbm","dir":"Articles","previous_headings":"","what":"Estimation with colSBM","title":"Tutorial on plant pollinator data","text":"load list 15 plant-pollinator networks. binary undirected networks different number plant pollinator species.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial-bipartite.html","id":"networks-benefiting-from-joint-modelisation","dir":"Articles","previous_headings":"Estimation with colSBM","what":"Networks benefiting from joint modelisation","title":"Tutorial on plant pollinator data","text":"First, going model jointly medan2002ld, medan2002rb networks, using iid-colBiSBM model. output indicates collection benefits joint modelisation Joint modelisation preferred based BICL criterion. can look variational bound model selection criteria evolve number clusters. , BICL criterion selects Q = 2, 2 blocks. State-space exploration","code":"set.seed(1234, \"L'Ecuyer-CMRG\") res_pp_iid <- estimate_colBiSBM(   netlist = dorebipartite[7L:8L], # A list of networks   colsbm_model = \"iid\", # The name of the model   net_id = names(dorebipartite)[7L:8L], # Name of the networks   nb_run = 2L, # Number of runs of the algorithm   global_opts = list(     verbosity = 1L,     plot_detail = 0L,     nb_cores = 2L,     backend = \"parallel\"   ) ) #>  #> Merging the 2 models #> After merging the 2 model runs, the criteria are the following: #>  #> vbound :  #>       [,1] [,2] [,3] [,4] [,5] #> [1,] -Inf -625 -620 -620 -Inf #> [2,] -720 -614 -605 -Inf -Inf #> [3,] -720 -606 -596 -Inf -Inf #> [4,] -Inf -Inf -Inf -Inf -Inf #> [5,] -Inf -Inf -Inf -Inf -Inf #> [6,] -Inf -Inf -Inf -Inf -Inf  #>  #> ICL    :  #>       [,1] [,2] [,3] [,4] [,5] #> [1,] -729 -635 -642 -650 -Inf #> [2,] -733 -653 -665 -Inf -Inf #> [3,] -739 -671 -667 -Inf -Inf #> [4,] -Inf -Inf -Inf -Inf -Inf #> [5,] -Inf -Inf -Inf -Inf -Inf #> [6,] -Inf -Inf -Inf -Inf -Inf  #>  #> BICL   :  #>       [,1] [,2] [,3] [,4] [,5] #> [1,] -729 -635 -636 -641 -Inf #> [2,] -730 -634 -635 -Inf -Inf #> [3,] -736 -636 -640 -Inf -Inf #> [4,] -Inf -Inf -Inf -Inf -Inf #> [5,] -Inf -Inf -Inf -Inf -Inf #> [6,] -Inf -Inf -Inf -Inf -Inf  #>  #> Best fit at Q=( 2, 2 ) #>  #> ==== Best fits criterion for the 2 networks. Computed in 0.43 secs ==== #> Sep BiSBM total BICL:  -640.6602 #> colBiSBM BICL: -633.8697 #> Joint modelisation preferred. With Q = ( 2, 2 ). #>  #> ==== Full computation performed in 15.2 secs ==== plot(res_pp_iid) best_fit <- res_pp_iid$best_fit"},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial-bipartite.html","id":"results-and-analysis","dir":"Articles","previous_headings":"Estimation with colSBM > Networks benefiting from joint modelisation","what":"Results and analysis","title":"Tutorial on plant pollinator data","text":"useful fields analyze results. can retrieve: estimation model parameters block memberships: probabilities: prediction dyads networks can also plot networks individually: Networks fitting model reordering nodes blocks make different plots exhibit mesoscale structure: Graphon type plot Mesoscale type plot","code":"best_fit #> Fitted Collection of Bipartite SBM -- bernoulli variant for 2 networks  #> ===================================================================== #> net_id = ( medan2002ld medan2002rb ) #> Dimensions = ( c(45, 21), c(72, 23) ) - ( 2, 2 ) blocks. #> BICL =  -633.8697  #> #Empty row blocks on all networks:  0  -- #Empty columns blocks on all networks:  0   #> * Useful fields  #>   $distribution, $nb_nodes, $nb_blocks, $support, $prob_memberships  #>   $memberships, $parameters, $BICL, $vbound, $pred_dyads  #> ===================================================================== best_fit$parameters #> $alpha #>           [,1]       [,2] #> [1,] 0.2132297 0.17088360 #> [2,] 0.4285972 0.03350959 #>  #> $pi #> $pi[[1]] #> [1] 0.07572543 0.92427457 #>  #> $pi[[2]] #> [1] 0.07572543 0.92427457 #>  #>  #> $rho #> $rho[[1]] #> [1] 0.08387756 0.91612244 #>  #> $rho[[2]] #> [1] 0.08387756 0.91612244 best_fit$memberships[[2]]$row[1:10] #>        Birds Trochilidae Sappho sparganura  #>                                          2  #>     Coleoptera Buprestidae Buprestidae sp.  #>                                          2  #>     Coleoptera Cantharidae Cantharidae sp.  #>                                          2  #>  Coleoptera Coccinellidae Coccinelidae sp1  #>                                          2  #>  Coleoptera Coccinellidae Coccinelidae sp2  #>                                          2  #>  Coleoptera Coccinellidae Coccinelidae sp3  #>                                          2  #> Coleoptera Curculionidae Curculionidae sp.  #>                                          2  #>           Coleoptera Meloidae Epicauta sp.  #>                                          2  #>     Coleoptera Mordellidae Mordellidae sp.  #>                                          2  #>      Diptera Anthomyiidae Anthomyiidae sp2  #>                                          2 best_fit$prob_memberships[[2]][[1]][1:10, 1] #>        Birds Trochilidae Sappho sparganura  #>                               0.2000449903  #>     Coleoptera Buprestidae Buprestidae sp.  #>                               0.0148961299  #>     Coleoptera Cantharidae Cantharidae sp.  #>                               0.0026079747  #>  Coleoptera Coccinellidae Coccinelidae sp1  #>                               0.0009135321  #>  Coleoptera Coccinellidae Coccinelidae sp2  #>                               0.0026079747  #>  Coleoptera Coccinellidae Coccinelidae sp3  #>                               0.0026079747  #> Coleoptera Curculionidae Curculionidae sp.  #>                               0.0026079747  #>           Coleoptera Meloidae Epicauta sp.  #>                               0.0414498548  #>     Coleoptera Mordellidae Mordellidae sp.  #>                               0.0009135321  #>      Diptera Anthomyiidae Anthomyiidae sp2  #>                               0.0026079747 best_fit$pred_dyads[[2]][1:10, 1] #>        Birds Trochilidae Sappho sparganura  #>                                 0.06144805  #>     Coleoptera Buprestidae Buprestidae sp.  #>                                 0.03610547  #>     Coleoptera Cantharidae Cantharidae sp.  #>                                 0.03442351  #>  Coleoptera Coccinellidae Coccinelidae sp1  #>                                 0.03419158  #>  Coleoptera Coccinellidae Coccinelidae sp2  #>                                 0.03442351  #>  Coleoptera Coccinellidae Coccinelidae sp3  #>                                 0.03442351  #> Coleoptera Curculionidae Curculionidae sp.  #>                                 0.03442351  #>           Coleoptera Meloidae Epicauta sp.  #>                                 0.03974006  #>     Coleoptera Mordellidae Mordellidae sp.  #>                                 0.03419158  #>      Diptera Anthomyiidae Anthomyiidae sp2  #>                                 0.03442351 plot(res_pp_iid$best_fit, type = \"block\", net_id = 1) +   plot(res_pp_iid$best_fit, type = \"block\", net_id = 2) plot(res_pp_iid$best_fit, type = \"graphon\") plot(res_pp_iid$best_fit, type = \"meso\", mixture = TRUE)"},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial-bipartite.html","id":"networks-not-benefiting-from-joint-modelisation","dir":"Articles","previous_headings":"Estimation with colSBM","what":"Networks not benefiting from joint modelisation","title":"Tutorial on plant pollinator data","text":"Next, model jointly medan2002ld, medan2002rb, olensen2002aig, olensen2002flo networks, using iid-colBiSBM model. output indicates collection benefit joint modelisation. Separated modelisation preferred structures might different gathered one collection.","code":"res_pp_iid_sep <- estimate_colBiSBM(   netlist = dorebipartite[7L:10L], # A list of networks   colsbm_model = \"iid\", # The name of the model   net_id = names(dorebipartite)[7L:10L], # Name of the networks   nb_run = 1L, # Number of runs of the algorithm   global_opts = list(     verbosity = 1L,     plot_detail = 0L,     nb_cores = 2L,     backend = \"no_mc\"   ) ) #>  #>  #>  #>  #>  #> ==== Best fits criterion for the 4 networks. Computed in 1.07 secs ==== #> Sep BiSBM total BICL:  -813.0666 #> colBiSBM BICL: -817.1685 #> Separated modelisation preferred. #>  #> ==== Full computation performed in 7.66 secs ===="},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial-bipartite.html","id":"clustering-of-networks","dir":"Articles","previous_headings":"","what":"Clustering of networks","title":"Tutorial on plant pollinator data","text":"case different structures clustering can used find partitionning among networks. simulate networks add 4 networks used previously. obtain list 3 tested collections. lists nested reflect sequential steps clustering. extraction best partition reveals 2 simulated networks considered part collection among 4 plant-pollinator networks exists difference leading 2 collections contains networks authors. plot mesoscale structure whole collection (ie partitionning) following: Whole collection graphon type plot can compare mesoscale structures 3 groups: Best partition graphon type plots","code":"alpha <- matrix(c(   0.9, 0.55,   0.6, 0.1 ), 2, 2, byrow = TRUE) pi <- c(0.73, 0.27) rho <- c(0.75, 0.25) sim_net <-   generate_bipartite_collection(     nr = 40L,     nc = 30L,     pi = pi,     rho = rho,     alpha = alpha,     M = 2L,     model = \"iid\"   ) set.seed(1234L) net_clust <- clusterize_bipartite_networks(   netlist = c(dorebipartite[7L:10L], sim_net), # A list of networks   colsbm_model = \"iid\", # The name of the model   net_id = c(     names(dorebipartite)[7L:10L],     paste0(\"sim\", seq_along(sim_net))   ), # Name of the networks   nb_run = 1L, # Number of runs of the algorithm   global_opts = list(     verbosity = 0L,     plot_details = 0L,     nb_cores = 2L,     backend = \"no_mc\",     Q1_max = 9L,     Q2_max = 9L   ), # Max number of clusters   fit_opts = list(max_vem_steps = 1000L) ) best_partition <- extract_best_partition(net_clust) plot(net_clust[[1]]) wrap_plots(   lapply(best_partition, function(collection) {     plot(collection, type = \"graphon\") +       ggplot2::ggtitle(label = \"\", subtitle = toString(collection$net_id))   }),   ncol = 2L )"},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial.html","id":"estimation-with-colsbm","dir":"Articles","previous_headings":"","what":"Estimation with colSBM","title":"Tutorial on food webs","text":"load list 8 foodwebs. binary directed networks different number species. First, going model jointly first 33 networks, using iid-colSBM model. can look variational bound model selection criteria evolve number clusters. , BICL criterion selects Q = 5 blocks.","code":"# global_opts = list(nb_cores = 1L, #                    nb_models = 5L, #                    nb_init = 10L, #                    depth = 2L, #                    verbosity = 1, #                    spectral_init = FALSE, #                    Q_max = 8L, #                    plot_details = 1)  set.seed(1234) res_fw_iid <- estimate_colSBM(   netlist = foodwebs[1:3], # A list of networks   colsbm_model = \"iid\", # The name of the model   directed = TRUE, # Foodwebs are directed networks   net_id = names(foodwebs)[1:3], # Name of the networks   nb_run = 1L, # Number of runs of the algorithm   global_opts = list(     verbosity = 0,     plot_details = 0,     Q_max = 8   ) # Max number of clusters ) plot(res_fw_iid) best_fit <- res_fw_iid$best_fit"},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial.html","id":"results-and-analysis","dir":"Articles","previous_headings":"","what":"Results and analysis","title":"Tutorial on food webs","text":"useful fields analyze results. can get: estimation model parameters block memberships: prediction dyads networks, network number 3. goal dyad prediction, use colsbm_model = \"delta\", instead colsbm_model = \"iid\". can also plot networks individually, groups reordered trophic levels:  make different plots exhibit mesoscale structure:","code":"best_fit #> Fitted Collection of Simple SBM -- bernoulli variant for 3 networks  #> ===================================================================== #> Dimension = ( 105 58 71 ) - ( 5 ) blocks. #> BICL =  -1966.999  -- #Empty blocks :  0   #> ===================================================================== #> * Useful fields  #>   $distribution, $nb_nodes, $nb_clusters, $support, $Z  #>   $memberships, $parameters, $BICL, $vbound, $pred_dyads best_fit$parameters #> $alpha #>              [,1]        [,2]         [,3]         [,4]         [,5] #> [1,] 2.045995e-04 0.654004854 7.872244e-01 1.019399e-09 7.976874e-01 #> [2,] 7.547256e-06 0.007953472 6.055094e-03 6.413325e-12 1.116853e-05 #> [3,] 2.703080e-05 0.143400957 7.534554e-02 2.381464e-10 3.577233e-03 #> [4,] 1.014393e-06 0.007758361 9.118897e-02 8.019048e-11 1.825920e-01 #> [5,] 4.187670e-06 0.010907266 3.094711e-06 7.262520e-12 1.470198e-08 #>  #> $pi #> $pi[[1]] #> [1] 0.02575797 0.28631455 0.10692669 0.45375528 0.12724551 #>  #> $pi[[2]] #> [1] 0.02575797 0.28631455 0.10692669 0.45375528 0.12724551 #>  #> $pi[[3]] #> [1] 0.02575797 0.28631455 0.10692669 0.45375528 0.12724551 #>  #>  #> $delta #> [1] 1 1 1 best_fit$Z #> [[1]] #>      Unidentified sp1 FW_009   Terrestrial plant material  #>                            1                            1  #>    Terrestrial invertebrates        Achnanthes lanceolata  #>                            3                            4  #>              Batrachospermum         Calothrix sp1 FW_009  #>                            4                            4  #>         Cocconeis placentula         Cosmarium sp1 FW_009  #>                            4                            4  #>        Cyclotella sp1 FW_009              Cymbella aspera  #>                            4                            4  #>           Cymbella cuspidata               Cymbella kappi  #>                            4                            4  #>              Cymbella tumida              Diatoma heimale  #>                            4                            4  #>              Epithemia sorex            Epithemia turgida  #>                            4                            4  #>           Eunotia serpentina      Unidentified sp2 FW_009  #>                            4                            4  #>           Euntoia pectinalis        Fragilaria sp1 FW_009  #>                            4                            4  #>        Fragilaria vaucheriae         Frustulia rhomboides  #>                            4                            4  #>        Gomphoneis herculeana       Gomphonema accuminatum  #>                            4                            4  #>        Gomphonema angustatum         Gomphonema truncatum  #>                            4                            4  #>      Unidentified sp3 FW_009             Melosira varians  #>                            4                            4  #>            Navicula avenacea           Navicula dicephala  #>                            4                            4  #>              Nitzschia dubia        Oedogonium sp1 FW_009  #>                            4                            4  #>        Phormidium sp1 FW_009         Pinnularia mesolepta  #>                            4                            4  #>           Pinnularia viridis    Pleaurotaenium sp1 FW_009  #>                            4                            4  #>         Rhoicospenia curvata        Rhopalodia sp1 FW_009  #>                            4                            4  #>       Schizothrix sp1 FW_009       Staurastrum sp1 FW_009  #>                            4                            4  #>            Surirella elegans             Surirella tenera  #>                            4                            4  #>                 Synedra ulna        Tabellaria fenestrata  #>                            4                            4  #>        Tabellaria flocculosa          Ulothrix sp1 FW_009  #>                            4                            4  #>      Unidentified sp4 FW_009      Unidentified sp5 FW_009  #>                            4                            4  #>        Acroneuria sp1 FW_009          Aelosoma sp1 FW_009  #>                            2                            3  #>         Alloperla sp1 FW_009         Anepeorus sp1 FW_009  #>                            2                            2  #>             Antocha saxicola                       Baetis  #>                            5                            3  #>               Boyeria vinosa Bryophaenocladius sp1 FW_009  #>                            2                            3  #>        Chauliodes sp1 FW_009            Chimarra atterima  #>                            2                            3  #>      Unidentified sp6 FW_009     Conchapelopia sp1 FW_009  #>                            5                            3  #>       Cryptolabis sp1 FW_009         Cyrnellus sp1 FW_009  #>                            2                            2  #>     Dicrotendipes sp1 FW_009          Diplectrona modesta  #>                            3                            5  #>             Ectopria nervosa   Endochironomous sp1 FW_009  #>                            5                            3  #>       Ephemerella sp1 FW_009  Eukieferiella pseudomontana  #>                            2                            3  #>   Eukiefferiella 'dark' type        Glossosoma sp1 FW_009  #>                            5                            2  #>          Gyraulus sp1 FW_009            Haploperla brevis  #>                            5                            2  #>          Hexatoma sp1 FW_009                Hydrophilidae  #>                            2                            2  #>  Hydropsyche sp1 FW_009arana            Larsia sp1 FW_009  #>                            3                            2  #>        Leucrocuta sp1 FW_009           Leuctra sp1 FW_009  #>                            5                            3  #>      Unidentified sp7 FW_009      Metriocnemus sp1 FW_009  #>                            3                            3  #>         Micrasema sp1 FW_009        Ochthebius sp1 FW_009  #>                            2                            2  #>      Ophiogomphus sp1 FW_009  Paraleptophlebia sp1 FW_009  #>                            2                            2  #>  Paranyctiophylax sp1 FW_009     Polycentropus sp1 FW_009  #>                            2                            2  #>         Probezzia sp1 FW_009        Promoresia sp1 FW_009  #>                            2                            3  #>         Psephenus sp1 FW_009 Pseudolimnolphila sp1 FW_009  #>                            5                            2  #>       Rhyacophila sp1 FW_009          Simulium sp1 FW_009  #>                            2                            5  #>        Sphaerium occidentale     Stempelinella sp1 FW_009  #>                            5                            5  #>            Stenelmis crenata         Stenelmis sp1 FW_009  #>                            5                            5  #>           Suwalia sp1 FW_009        Tallaperla sp1 FW_009  #>                            2                            3  #>           Tanytarsus Genus A     Tricorythodes sp1 FW_009  #>                            2                            2  #>        Notropis heterolepsis                  Brook trout  #>                            2                            2  #>           Orcnocetes virilis       Rhinichthys cataractae  #>                            2                            2  #>            Cambarus bartonii  #>                            2  #>  #> [[2]] #>     Unidentified sp1 FW_012_01      Terrestrial invertebrates  #>                              1                              4  #>                 Plant material          Achnanthes lanceolata  #>                              1                              4  #>         Achnanthes minutissima      Audouinella sp1 FW_012_01  #>                              4                              4  #>                Batrachospermum               Blue-green algae  #>                              4                              4  #>                      Calothrix               Cymbella cistula  #>                              4                              4  #>               Cymbella mulleri                Diatoma heimale  #>                              4                              4  #>                Epithemia sorex              Epithemia turgida  #>                              4                              4  #>             Eunotia pectinalis          Eunotia sp1 FW_012_01  #>                              4                              4  #>           Frustulia rhomboides          Gomphoneis herculeana  #>                              4                              4  #>          Gomphonema intricatum       Gomphonema sp1 FW_012_01  #>                              4                              4  #>             Meridion circulare              Navicula avenacea  #>                              4                              4  #>                  Pleurotaenium          Rhoicosphenia curvata  #>                              4                              4  #>                  Stigeoclonium                   Synedra ulna  #>                              4                              4  #>                       Ulothrix     Unidentified sp2 FW_012_01  #>                              4                              4  #>                       Aelosoma    Brachycentrus sp1 FW_012_01  #>                              3                              5  #>               Cambarus bartoni       Chauliodes sp1 FW_012_01  #>                              2                              2  #>         Cordulegaster maculata        Dicranota sp1 FW_012_01  #>                              2                              2  #>             Ectopria thoracica                 Epeorus dispar  #>                              5                              5  #>       Glossosoma sp1 FW_012_01      Homoplectra sp1 FW_012_01  #>                              2                              3  #>       Hudsonimya sp1 FW_012_01      Hydropsyche sp1 FW_012_01  #>                              2                              3  #>       Leucrocuta sp1 FW_012_01          Leuctra sp1 FW_012_01  #>                              5                              2  #>       Lumbriculiid oligochaete Parametriocnemus sp1 FW_012_01  #>                              3                              5  #>     Neureclipsis sp1 FW_012_01     Ophiogomphus sp1 FW_012_01  #>                              5                              2  #>        Palpomyia sp1 FW_012_01        Palpomyia sp2 FW_012_01  #>                              2                              2  #>       Promoresia sp1 FW_012_01        Psephenus sp1 FW_012_01  #>                              5                              5  #>        Soliperla sp1 FW_012_01                Stenelmis adult  #>                              2                              2  #>        Stenelmis sp1 FW_012_01          Suwalia sp1 FW_012_01  #>                              2                              2  #>               Tallaperla maria        Thaumalea sp1 FW_012_01  #>                              2                              5  #>             Tipula abdominalis                     Salamander  #>                              5                              2  #>  #> [[3]] #>    Unidentified sp1 FW_012_02            Terrestrial plants  #>                             1                             1  #>              Terrestrial bugs Achnanthes inflata var. elata  #>                             4                             4  #>         Achnanthes lanceolata           Achnanthes linearis  #>                             4                             4  #>        Achnanthes minutissima           Auodinella hermanii  #>                             4                             4  #>              Blue Green algae                     Calothrix  #>                             4                             4  #>          Cocconeis placentula                Cymbella kappi  #>                             4                             4  #>              Cymbella mulleri               Diatoma heimale  #>                             4                             4  #>             Epithemia turgida              Eunotia meisteri  #>                             4                             4  #>            Eunotia pectinalis         Fragilaria vaucheriae  #>                             4                             4  #>          Frustulia rhomboides         Gomphoneis herculeana  #>                             4                             4  #>        Gomphonema accuminatum         Gomphonema angustatum  #>                             4                             4  #>         Gomphonema intricatum         Gomphonema tennuellum  #>                             4                             4  #>                  Marssoniella             Navicula avenacea  #>                             4                             4  #>        Navicula cryptocephala               Navicula mutica  #>                             4                             4  #>        Navicula sp1 FW_012_02            Pinnularia viridis  #>                             4                             4  #>         Rhoicosphenia curvata                    Rhopalodia  #>                             4                             4  #>         Surirella brebbisonii             Surirella elegans  #>                             4                             4  #>                   Synechoccus                  Synedra ulna  #>                             4                             4  #>                      Ulothrix    Unidentified sp2 FW_012_02  #>                             4                             4  #>       Aeolosoma sp1 FW_012_02                 Ajax longipes  #>                             3                             2  #>               Amphinemura wui           Anchytarsus bicolor  #>                             5                             2  #>                        Baetis                    Hudsonimya  #>                             5                             2  #>                    Cricotopus                     Dicranota  #>                             5                             2  #>  Eukieffidrella pseudomontana           Diplectrona modesta  #>                             2                             2  #>                       Dixella                  Dolophilodes  #>                             2                             2  #>            Ectopria thoracica                Epeorus dispar  #>                             5                             5  #>                  Fatigia pele        Hexatoma sp1 FW_012_02  #>                             2                             2  #>                       Leuctra             Oligo Lumbr. Blue  #>                             3                             3  #>            Oligo. Lumbr. Pink                  Ophiogomphus  #>                             3                             2  #>             Paraleptophelebia                      Pericoma  #>                             2                             5  #>                       Pilaria      Pentaneuri sp1 FW_012_02  #>                             2                             3  #>       Polycentropus maculatus                     Stenelmis  #>                             2                             5  #>              Tallaperla maria                     Tanyderid  #>                             2                             2  #>                 Conchapelopia                        Tipula  #>                             2                             2  #>              Wormaldia moesta                      Crayfish  #>                             2                             2  #>                    Salamander  #>                             2 best_fit$pred_dyads[[3]][1:10, 1:5] #>                               Unidentified sp1 FW_012_02 Terrestrial plants #> Unidentified sp1 FW_012_02                  0.000000e+00       2.046018e-04 #> Terrestrial plants                          2.046018e-04       0.000000e+00 #> Terrestrial bugs                            3.266636e-06       3.266636e-06 #> Achnanthes inflata var. elata               1.023083e-06       1.023083e-06 #> Achnanthes lanceolata                       1.014993e-06       1.014993e-06 #> Achnanthes linearis                         1.014738e-06       1.014738e-06 #> Achnanthes minutissima                      1.016412e-06       1.016412e-06 #> Auodinella hermanii                         2.339017e-06       2.339017e-06 #> Blue Green algae                            1.015086e-06       1.015086e-06 #> Calothrix                                   1.106559e-06       1.106559e-06 #>                               Terrestrial bugs Achnanthes inflata var. elata #> Unidentified sp1 FW_012_02         0.121088033                  4.531901e-05 #> Terrestrial plants                 0.121088033                  4.531901e-05 #> Terrestrial bugs                   0.000000000                  4.525853e-06 #> Achnanthes inflata var. elata      0.005987599                  0.000000e+00 #> Achnanthes lanceolata              0.005983016                  5.117200e-06 #> Achnanthes linearis                0.005982871                  5.117149e-06 #> Achnanthes minutissima             0.005983818                  5.117480e-06 #> Auodinella hermanii                0.005133356                  4.208144e-06 #> Blue Green algae                   0.005983068                  5.117218e-06 #> Calothrix                          0.006035075                  5.130186e-06 #>                               Achnanthes lanceolata #> Unidentified sp1 FW_012_02             7.141368e-08 #> Terrestrial plants                     7.141368e-08 #> Terrestrial bugs                       7.256724e-09 #> Achnanthes inflata var. elata          8.223344e-09 #> Achnanthes lanceolata                  0.000000e+00 #> Achnanthes linearis                    8.221291e-09 #> Achnanthes minutissima                 8.221812e-09 #> Auodinella hermanii                    6.757226e-09 #> Blue Green algae                       8.221399e-09 #> Calothrix                              8.241566e-09 p <- gtools::permutations(best_fit$Q, best_fit$Q) ind <- which.min(   sapply(     seq(nrow(p)),     function(x) {       sum((tcrossprod(best_fit$pi[[1]]) * best_fit$alpha)[p[x, ], p[x, ]][         upper.tri(best_fit$alpha)       ])     }   ) ) ord <- p[ind, ] plot(res_fw_iid$best_fit, type = \"block\", net_id = 1, ord = ord) +   plot(res_fw_iid$best_fit, type = \"block\", net_id = 2, ord = ord) +   plot(res_fw_iid$best_fit, type = \"block\", net_id = 3, ord = ord) plot(res_fw_iid$best_fit, type = \"graphon\", ord = ord) plot(res_fw_iid$best_fit, type = \"meso\", mixture = TRUE, ord = ord) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3`"},{"path":"https://chabert-liddel.github.io/colSBM/articles/tutorial.html","id":"clustering-of-networks","dir":"Articles","previous_headings":"","what":"Clustering of networks","title":"Tutorial on food webs","text":"Let simulate directed networks lower triangular structure looks alike foodwebs. obtain list 3 models. first one full collection, second third one 3 foodwebs three collected networks. plot mesoscale structure obtained group simulated networks. can extract best partition: plot mesoscale structure whole collection following:  can compare mesoscale structures 2 groups:","code":"set.seed(1234) alpha <- matrix(c(   .05, .01, .01, .01,   .3, .05, .01, .01,   .5, .4, .05, .01,   .1, .8, .1, .05 ), 4, 4, byrow = TRUE) pi <- c(.1, .2, .6, .1) sim_net <-   replicate(3,     {       X <-         sbm::sampleSimpleSBM(100,           blockProp = pi, connectParam = list(mean = alpha),           directed = TRUE         )       X$rNetwork       X$networkData     },     simplify = FALSE   ) set.seed(1234)  net_clust <- clusterize_networks(   netlist = c(foodwebs[1:3], sim_net), # A list of networks   colsbm_model = \"iid\", # The name of the model   directed = TRUE, # Foodwebs are directed networks   net_id = c(names(foodwebs)[1:3], \"sim1\", \"sim2\", \"sim3\"), # Name of the networks   nb_run = 3L, # Nmber of runs of the algorithm   global_opts = # List of options     list(       verbosity = 0, # Verbosity level of the algorithm       plot_details = 0, # Monitoring plot of the algorithm       Q_max = 9, # Max number of clusters       backend = \"parallel\" # Backend for parallel computing     ) ) best_partition <- extract_best_partition(net_clust) plot(net_clust[[1]],   ord = order(net_clust[[1]]$alpha %*% net_clust[[1]]$pi[[1]]) ) plot(best_partition[[1]],   type = \"graphon\",   ord = order(best_partition[[1]]$alpha %*% best_partition[[1]]$pi[[1]]) ) +   plot(best_partition[[2]],     type = \"graphon\",     ord = order(best_partition[[2]]$alpha %*% best_partition[[2]]$pi[[1]])   ) +   plot_layout(guides = \"collect\") + plot_annotation(tag_levels = \"1\")"},{"path":"https://chabert-liddel.github.io/colSBM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Saint-Clair Chabert-Liddell. Author, maintainer. Louis Lacoste. Author.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chabert-Liddell, S. C., Barbillon, P., & Donnet, S. (2022). Learning common     structures collection networks.     application food webs. arXiv preprint arXiv:2206.00560.","code":"@Article{,   title = {Learning common structures in a collection of networks. An application to food webs},   author = {{Chabert-Liddell} and {Saint-Clair} and {Barbillon} and {Pierre} and {Donnet} and {Sophie}},   journal = {arXiv preprint arXiv:2206.00560},   year = {2022}, }"},{"path":"https://chabert-liddel.github.io/colSBM/index.html","id":"colsbm","dir":"","previous_headings":"","what":"Stochastic Block Model for Collection of Networks","title":"Stochastic Block Model for Collection of Networks","text":"colSBM R package implements methods clustering inferring mesoscale structure collection networks. particular, allows : Find common mesoscale structure collection networks using Stochastic Block Model (SBM) extension joint modeling collection networks. Provide clustering nodes networks. Classifies networks groups networks similar mesoscale structures. Mathematical details methods well simulation studies applications can find Chabert-Liddell, Barbillon, Donnet (2024) .","code":""},{"path":"https://chabert-liddel.github.io/colSBM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stochastic Block Model for Collection of Networks","text":"can install development version colSBM GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Chabert-Liddell/colSBM\")"},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/adjust_colBiSBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust a colBiSBM on a given point — adjust_colBiSBM","title":"Adjust a colBiSBM on a given point — adjust_colBiSBM","text":"Adjust colBiSBM given point","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/adjust_colBiSBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust a colBiSBM on a given point — adjust_colBiSBM","text":"","code":"adjust_colBiSBM(fitted_bisbmpop, Q, depth = 1L, nb_pass = 1L)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/adjust_colBiSBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust a colBiSBM on a given point — adjust_colBiSBM","text":"fitted_bisbmpop fitted bisbmpop, obtained using estimate_colBiSBM Q vector size 2, containing coordinates model want fit depth depth (far center explore) moving window. Default 1. nb_pass number passes moving window perform. Default 1.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/adjust_colBiSBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust a colBiSBM on a given point — adjust_colBiSBM","text":"bisbmpop object models collection networks. object fitted_bisbmpop","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":null,"dir":"Reference","previous_headings":"","what":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"object contain logic methods estimate colBiSBM model","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"n list two dimensions, size M rows cols List incidence Matrix size n[[1]][m]xn[[2]][m] M Number networks mask List M masks, indicating NAs matrices. 1 NA, 0 else distribution Emission distribution either : \"poisson\" \"bernoulli\" net_id vector containing \"ids\" names networks (none given, set number list) model_list list size Q1max * Q2max containing best models discarded_model_list list size Q1max * Q2max * (nb_models - 1) containing discarded models. global_opts list options model space exploration. See details information options available. fit_opts list options specifically fitting models. separated_inits nested list : Q1 init containing Q2 init entry containing list size M storing separated inits class. exploration_order_list list used store path taken state space. Z_init list initializations Z memberships. free_mixture_row boolean signaling free mixture row blocks free_mixture_col boolean signaling free mixture columns blocks ICL matrix size Q1*Q2 storing best ICL found value Q1, Q2. sep_BiSBM named list containing attributes sep BiSBM. BICL matrix size Q1*Q2 storing best BICL found value Q1, Q2. vbound matrix size Q1*Q2 storing best vbound found value Q1, Q2. best_fit fitBipartiteSBMPop object changing regularly store current best fit. adjusted_fit Defining field case user wants adjust prefitted bisbmpop. logfactA quantity used Poisson probability distribution improved field use step check improved. moving_window_coordinates list size two containing coordinates bottom left top right points square old_moving_window_coordinates list containing previous coordinates moving window. joint_modelisation_preferred boolean store preferred modelisation.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"bisbmpop$new() bisbmpop$split_clustering() bisbmpop$merge_clustering() bisbmpop$state_space_plot() bisbmpop$greedy_exploration() bisbmpop$optimize_from_zinit() bisbmpop$burn_in() bisbmpop$optimize() bisbmpop$moving_window() bisbmpop$truncate_discarded_model_list() bisbmpop$point_is_in_limits() bisbmpop$store_criteria_and_best_fit() bisbmpop$compute_sep_BiSBM_BICL() bisbmpop$choose_joint_or_separated() bisbmpop$plot() bisbmpop$print_metrics() bisbmpop$show() bisbmpop$print() bisbmpop$clone()","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"Create new instance bisbmpop object class generally called via user function estimate_colBiSBM","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$new(   netlist = NULL,   net_id = NULL,   distribution = NULL,   free_mixture_row = FALSE,   free_mixture_col = FALSE,   Z_init = NULL,   global_opts = list(),   fit_opts = list() )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"netlist list M networks net_id list name networks, defaults 1 M provided distribution emission distribution either \"bernoulli\" \"poisson\" free_mixture_row boolean indicating free mixture row blocks free_mixture_col boolean indicating free mixture column blocks Z_init bidimensional list providing clustering row column nodes global_opts list global options used algorithm. See details user function information. fit_opts list fit options used algorithm. See details user function information.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"new 'bisbmpop' object. method perform splitting clusters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$split_clustering(origin_model, axis = \"row\")"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"origin_model model (fitBipartite object) split . axis string indicate column split row split. \"row\" \"col\".","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"best possible models tested method perform merging clusters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$merge_clustering(origin_model, axis = \"row\")"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"origin_model model (fitBipartite object) merge . axis string indicate \"row\", \"col\" \"\" merge","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"best possible models tested method plot state space current exploration.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$state_space_plot(plot_detail = self$global_opts$plot_detail)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"plot_detail default set using global options.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"method takes parameters print plot current state model_list.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing Method greedily explore state space looking mode storing models discovered along way","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$greedy_exploration(   starting_point,   max_iter = self$fit_opts$greedy_exploration_max_steps,   max_step_without_improvement =     self$fit_opts$greedy_exploration_max_steps_without_improvement )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"starting_point vector two coordinates c(Q1,Q2) starting point. max_iter maximum number iteration greedy exploration perform, defaults 12. max_step_without_improvement defaults 2, number steps try improving stopping search.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"c(Q1_mode, Q2_mode) indicates Q1 Q2 BICL maximal. Optimization given Z_init method takes parameters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$optimize_from_zinit()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing stores models model list Burn-method start exploring state space method takes parameters modify object","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$burn_in()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing; stores values optimization method","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"method performs burn (ie initialization + greedy exploration) steps moving window cluster splitting merging around mode found.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$optimize()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing; stores values moving window application","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-moving-window-","dir":"Reference","previous_headings":"","what":"Method moving_window()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"method moving windows Q1xQ2 space number clusters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$moving_window(center, depth = 1)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"center coordinates (Q1, Q2) model list mode depth far away center method applied grid style going center - (depth,depth) center + (depth, depth)","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing; updates object adding new models truncate discarder model list","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-truncate-discarded-model-list-","dir":"Reference","previous_headings":"","what":"Method truncate_discarded_model_list()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"method remove worst models regarding BICL criterion.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$truncate_discarded_model_list()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing Check point limits","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$point_is_in_limits(point)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"point vector size 2, containing first coordinate Q1, number row blocks Q2 number column blocks.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"boolean point limits [0,Q1_max]x[0,Q2_max] Store criteria best fit","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-store-criteria-and-best-fit-","dir":"Reference","previous_headings":"","what":"Method store_criteria_and_best_fit()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"method stores criteria (vbound, ICL, BICL) models model_list attribute end choose best model using BICL criterion.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$store_criteria_and_best_fit()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing; modifies object Computation separated Bi SBM","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-compute-sep-bisbm-bicl-","dir":"Reference","previous_headings":"","what":"Method compute_sep_BiSBM_BICL()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"method performs computation BiSBM network netlist.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$compute_sep_BiSBM_BICL()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing; stores values Method choose collection modelisation separated one","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-choose-joint-or-separated-","dir":"Reference","previous_headings":"","what":"Method choose_joint_or_separated()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"Using BICL criterion, best model fitted procedure separated Bi SBM method choose one maximizes BICL criterion.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$choose_joint_or_separated()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing; stores boolean Plot method","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"Plots state space exploration Print vbound, ICL BICL","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$plot()"},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$print_metrics()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing message printed one prints object","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$show(   type = \"Fitted Collection of Bipartite SBM\\nwith all fitted models\" )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"type title message. print method","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$print()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"nothing; prints console","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"objects class cloneable method.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"","code":"bisbmpop$clone(deep = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bisbmpop.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of BiSBM networks — bisbmpop","text":"deep Whether make deep clone.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":null,"dir":"Reference","previous_headings":"","what":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"R6 Class object, collection model population sbm netowrks R6 Class object, collection model population sbm netowrks","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"n list size M number nodes per network List incidence Matrix size n \\times n M Number networks mask List M masks, indicating NAs matrices. 1 NA, 0 else directed boolean indicating networks directed distribution Emission distribution either : \"poisson\" \"bernoulli\" net_id vector containing \"ids\" names networks (none given, set number list) model_list list size Q containing best models global_opts list options model space exploration. See details information options available. fit_opts list options specifically fitting models. fit_sbm Pre-fitted sbm objects Z_init list initializations Z memberships. free_density boolean indicating consider free density networks density free_mixture boolean signaling free mixture ICL_sbm list storing ICL sbm fitted ICL list size Q storing best ICL found Q BICL list size Q storing best BICL found Q vbound list size Q storing best vbound found Q best_fit fitSimpleSBMPop object changing regularly store current best fit. logfactA quantity used Poisson probability distribution improved field use step check improved.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"bmpop$new() bmpop$optimize_sbm() bmpop$optimize_from_sbm() bmpop$optimize_spectral() bmpop$optimize_init() bmpop$optimize_from_zinit() bmpop$burn_in() bmpop$forward_pass() bmpop$backward_pass() bmpop$optimize() bmpop$choose_models() bmpop$show() bmpop$print() bmpop$plot() bmpop$clone()","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"Create new instance bisbmpop object class generally called via user function estimate_colBiSBM","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$new(   netlist = NULL,   net_id = NULL,   directed = NULL,   distribution = \"bernoulli\",   free_density = FALSE,   free_mixture = FALSE,   fit_sbm = NULL,   Z_init = NULL,   global_opts = list(),   fit_opts = list() )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"netlist list M networks net_id list name networks, defaults 1 M provided directed boolean indicating networks directed distribution emission distribution either \"bernoulli\" \"poisson\" free_density account different density networks free_mixture boolean indicating free mixture fit_sbm pre-fitted SBM Z_init list providing clustering nodes global_opts list global options used algorithm. See details user function information. fit_opts list fit options used algorithm. See details user function information.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"new 'sbmpop' object. Fit list SBM fit_sbm == TRUE","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_sbm()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"nothing; stores values Fit colSBM mode using sbm initializations","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_from_sbm(index, Q, nb_clusters)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"index sequence networks number going 1 M Q number clusters nb_clusters subindex model list, practice always 1","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"bmpop object Fit colSBM mode using spectral decompositions initializations","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_spectral(index, Q, nb_clusters)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"index sequence networks number going 1 M Q number clusters nb_clusters subindex model list, practice always 1","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"bmpop object Fit colSBM model using given initialization provided Z specific network","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_init(index, Z, Q, nb_clusters, Cpi = NULL, Calpha = NULL)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"index sequence networks number going 1 M Z provided initialization Q number clusters nb_clusters subindex model list, practice always 1 Cpi list size M containing support possibly absent blocks, defaults NULL Calpha list size M containing support possibly absent interaction parameter, defaults NULL","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"bmpop object Fit whole colSBM mode using given initialization provided given Z_init","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_from_zinit(index, Q, nb_clusters)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"index sequence networks number going 1 M Q number clusters nb_clusters subindex model list, practice always 1","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"bmpop object Burn-method performs initialization necessary next begin search model selection","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$burn_in()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"nothing; stores values forward pass split clusters found previously reallocate nodes new clusters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$forward_pass(   Q_min = self$global_opts$Q_min,   Q_max = self$global_opts$Q_max,   index = seq(self$M),   nb_clusters = 1L )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"Q_min minimal number clusters, defaults global options Q_min parameter Q_max max number clusters, defaults global options Q_max parameter index sequence networks number going 1 M nb_clusters subindex model list, practice always 1","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"Q - 1 backward pass merges clusters found previously","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$backward_pass(   Q_min = self$global_opts$Q_min,   Q_max = self$global_opts$Q_max,   index = seq(self$M),   nb_clusters = 1L )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"Q_min minimal number clusters, defaults global options Q_min parameter Q_max max number clusters, defaults global options Q_max parameter index sequence networks number going 1 M nb_clusters subindex model list, practice always 1","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"Q + 1 optimization method","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"method performs burn steps moving window cluster splitting (forward pass) merging (backward pass) around mode found.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"nothing; stores values Performs model selection based BICL criterion","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$choose_models(models, Q, index = seq(self$M), nb_clusters = 1L)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"models list models choose best Q value Q model selection performed index sequence networks number going 1 M nb_clusters subindex model list, practice always 1","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"best models message printed one prints object","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$show(type = \"Fitted Collection of Simple SBM\")"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"type title message. print method","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$print()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"nothing; print console Plot method","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$plot(type = \"trace\", ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"type type plot ...","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"objects class cloneable method.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$clone(deep = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/bmpop.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"deep Whether make deep clone.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_bipartite_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition of a collection of bipartite networks based on their common mesoscale structures — clusterize_bipartite_networks","title":"Partition of a collection of bipartite networks based on their common mesoscale structures — clusterize_bipartite_networks","text":"Partition collection bipartite networks based common mesoscale structures","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_bipartite_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition of a collection of bipartite networks based on their common mesoscale structures — clusterize_bipartite_networks","text":"","code":"clusterize_bipartite_networks(   netlist,   colsbm_model,   net_id = NULL,   distribution = \"bernoulli\",   nb_run = 3L,   global_opts = list(),   fit_opts = list(),   fit_init = NULL,   full_inference = FALSE )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_bipartite_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition of a collection of bipartite networks based on their common mesoscale structures — clusterize_bipartite_networks","text":"netlist list matrices. colsbm_model colSBM use, one \"iid\", \"pi\", \"rho\", \"pirho\", \"delta\", \"deltapi\". net_id vector string, name networks. distribution string, emission distribution, either \"bernoulli\" (default) \"poisson\" nb_run integer, number run algorithm . global_opts Global options outer algorithm output fit_opts Fit options VEM algorithm fit_init use! Optional fit init initializing algorithm. full_inference default \"FALSE\", algorithm stop splitting groups networks improve BICL criterion. \"TRUE\", continue split groups trivial classification one network per group.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_bipartite_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition of a collection of bipartite networks based on their common mesoscale structures — clusterize_bipartite_networks","text":"list models recursive partition collection networks.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_bipartite_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partition of a collection of bipartite networks based on their common mesoscale structures — clusterize_bipartite_networks","text":"best partition extract function extract_best_partition(). object list fitBipartiteSBMPop object, model given number blocks Q1, Q2. functions make call estimate_colBiSBM.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_bipartite_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partition of a collection of bipartite networks based on their common mesoscale structures — clusterize_bipartite_networks","text":"","code":"alpha1 <- matrix(c(0.8, 0.1, 0.2, 0.7), byrow = TRUE, nrow = 2) alpha2 <- matrix(c(0.8, 0.5, 0.5, 0.2), byrow = TRUE, nrow = 2) first_collection <- generate_bipartite_collection(   nr = 50, nc = 25,   pi = c(0.5, 0.5), rho = c(0.5, 0.5),   alpha = alpha1, M = 2 ) second_collection <- generate_bipartite_collection(   nr = 50, nc = 25,   pi = c(0.5, 0.5), rho = c(0.5, 0.5),   alpha = alpha2, M = 2 )  netlist <- append(first_collection, second_collection)  if (FALSE) { # \\dontrun{ cl_separated <- clusterize_bipartite_networks(   netlist = netlist,   colsbm_model = \"iid\",   global_opts = list(nb_cores = parallelly::availableCores(omit = 1L)) ) } # }"},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition of a collection of networks based on their common mesoscale structures — clusterize_networks","title":"Partition of a collection of networks based on their common mesoscale structures — clusterize_networks","text":"Partition collection networks based common mesoscale structures","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition of a collection of networks based on their common mesoscale structures — clusterize_networks","text":"","code":"clusterize_networks(   netlist,   colsbm_model,   net_id = NULL,   directed = NULL,   distribution = \"bernoulli\",   fit_sbm = NULL,   nb_run = 3L,   global_opts = list(),   fit_opts = list(),   fit_init = NULL,   full_inference = FALSE )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition of a collection of networks based on their common mesoscale structures — clusterize_networks","text":"netlist list matrices. colsbm_model colSBM use, one \"iid\", \"pi\", \"delta\", \"deltapi\". net_id vector string, name networks. directed boolean, networks directed . distribution string, emission distribution, either \"bernoulli\" (default) \"poisson\" fit_sbm list fitted models using sbm package. Use speed initialization. nb_run integer, number run algorithm . global_opts Global options outer algorithm output fit_opts Fit options VEM algorithm fit_init use! Optional fit init initializing algorithm. full_inference default \"FALSE\", algorithm stop splitting groups networks improve BICL criterion. \"TRUE\", continue split groups trivial classification one network per group.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition of a collection of networks based on their common mesoscale structures — clusterize_networks","text":"list models recursive partition collection networks.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partition of a collection of networks based on their common mesoscale structures — clusterize_networks","text":"best partition extract function extract_best_partition(). object list FitSimpleSBMPop object, model given number blocks Q.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/clusterize_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partition of a collection of networks based on their common mesoscale structures — clusterize_networks","text":"","code":"#' # Trivial example with Gnp networks: Net <- lapply(   list(.7, .7, .2, .2),   function(p) {     A <- matrix(0, 15, 15)     A[lower.tri(A)][sample(15 * 14 / 2, size = round(p * 15 * 14 / 2))] <- 1     A <- A + t(A)   } ) if (FALSE) { # \\dontrun{ cl <- clusterize_networks(Net,   colsbm_model = \"iid\",   directed = FALSE,   distribution = \"bernoulli\",   nb_run = 1 ) } # }"},{"path":"https://chabert-liddel.github.io/colSBM/reference/colSBM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"colSBM: Stochastic Block Model for Collection of Networks — colSBM-package","title":"colSBM: Stochastic Block Model for Collection of Networks — colSBM-package","text":"Finds common mesoscale structure collection networks using Stochastic Block Model (SBM) extension joint modeling collection networks described arXiv:2206.00560. Provides clustering nodes networks. Classifies networks sub-collections networks similar mesoscale structures.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/colSBM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"colSBM: Stochastic Block Model for Collection of Networks — colSBM-package","text":"Maintainer: Saint-Clair Chabert-Liddell academic@chabert-liddell.com (ORCID) Authors: Louis Lacoste","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bisbmpop_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the dissimilarity between 2 mesoscale structures for bipartite SBM — dist_bisbmpop_max","title":"Compute the dissimilarity between 2 mesoscale structures for bipartite SBM — dist_bisbmpop_max","text":"Compute dissimilarity 2 mesoscale structures bipartite SBM","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bisbmpop_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the dissimilarity between 2 mesoscale structures for bipartite SBM — dist_bisbmpop_max","text":"","code":"dist_bisbmpop_max(pi, rho, alpha, delta = c(1, 1), weight = \"max\", norm = \"L2\")"},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bisbmpop_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the dissimilarity between 2 mesoscale structures for bipartite SBM — dist_bisbmpop_max","text":"pi list two probability vectors (row) rho list two probability vectors (columns) alpha list two connectivity matrices delta vector 2 density parameters (optional) weight One \"max\" (default) \"mean\". See details norm \"L1\"\"L2\" norm computation","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bisbmpop_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the dissimilarity between 2 mesoscale structures for bipartite SBM — dist_bisbmpop_max","text":"dissimilarity two mesoscale structure.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bisbmpop_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the dissimilarity between 2 mesoscale structures for bipartite SBM — dist_bisbmpop_max","text":"weight \"max\" weight block computed pmax(pi[[1]], pi[[2]]). \"mean\", take average. \"max\" penalize greater extent difference block proportion structure.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bisbmpop_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the dissimilarity between 2 mesoscale structures for bipartite SBM — dist_bisbmpop_max","text":"","code":"pi <- list(c(0.5, 0.5), c(0.1, 0.9)) rho <- list(c(0.1, 0.9), c(0.5, 0.5)) alpha <- list(   matrix(c(     0.9, 0.1,     0.1, 0.05   ), byrow = TRUE, nrow = 2),   matrix(c(     0.9, 0.1,     0.1, 0.05   ), byrow = TRUE, nrow = 2) ) dist_bisbmpop_max(pi, rho, alpha) #> [1] 0"},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"Compute dissimilarity 2 mesoscale structures","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"","code":"dist_bmpop_max(   pi,   alpha,   delta = c(1, 1),   weight = \"max\",   norm = \"L2\",   directed )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"pi list two probability vectors alpha list two connectivity matrices delta vector 2 density parameters (optional) weight One \"max\" (default) \"mean\". See details norm \"L1\"\"L2\" norm computation directed structure networks directed?","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"dissimilarity two mesoscale structure.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"weight \"max\" weight block computed pmax(pi[[1]], pi[[2]]). \"mean\", take average. \"max\" penalize greater extent difference block proportion structure.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"","code":"pi <- list(c(0.5, 0.5), c(0.1, 0.9)) alpha <- list(   matrix(c(     0.9, 0.1,     0.1, 0.05   ), byrow = TRUE, nrow = 2),   matrix(c(     0.9, 0.1,     0.1, 0.05   ), byrow = TRUE, nrow = 2) ) dist_bmpop_max(pi, alpha) #> [1] 0"},{"path":"https://chabert-liddel.github.io/colSBM/reference/dorebipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of 15 plant-pollinator bipartite networks — dorebipartite","title":"A collection of 15 plant-pollinator bipartite networks — dorebipartite","text":"dataset 15 plant-pollinator bipartite networks extracted study.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dorebipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of 15 plant-pollinator bipartite networks — dorebipartite","text":"","code":"dorebipartite"},{"path":"https://chabert-liddel.github.io/colSBM/reference/dorebipartite.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A collection of 15 plant-pollinator bipartite networks — dorebipartite","text":"named list 15 binary adjacency matrices: arroyo1982_1+arroyo1982_2+arroyo3 113 pollinator species, 131 plant species 544 pollination interactions dupont2003 38 pollinator species, 11 plant species 106 pollination interactions eberling1999 118 pollinator species, 23 plant species 238 pollination interactions herrera1988 179 pollinator species, 26 plant species 412 pollination interactions inouye1988 88 pollinator species, 41 plant species 279 pollination interactions kato1990 679 pollinator species, 93 plant species 1207 pollination interactions medan2002ld 45 pollinator species, 21 plant species 83 pollination interactions medan2002rb 72 pollinator species, 23 plant species 125 pollination interactions olensen2002aig 13 pollinator species, 14 plant species 52 pollination interactions olensen2002flo 12 pollinator species, 10 plant species 30 pollination interactions ramirez1992 53 pollinator species, 28 plant species 109 pollination interactions small1976 34 pollinator species, 13 plant species 141 pollination interactions vazquez2002 90 pollinator species, 14 plant species 164 pollination interactions petanidou1991 666 pollinator species, 131 plant species 2933 pollination interactions ramirez1989 49 pollinator species, 48 plant species 156 pollination interactions","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dorebipartite.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A collection of 15 plant-pollinator bipartite networks — dorebipartite","text":"https://zenodo.org/records/4300427","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/dorebipartite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A collection of 15 plant-pollinator bipartite networks — dorebipartite","text":"Reference: Doré M., Fontaine C., Thébault E. (2021), Relative effects anthropogenic pressures, climate, sampling design structure pollination networks global scale","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colBiSBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a colBiSBM on a collection of networks — estimate_colBiSBM","title":"Estimate a colBiSBM on a collection of networks — estimate_colBiSBM","text":"Estimate colBiSBM collection networks","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colBiSBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a colBiSBM on a collection of networks — estimate_colBiSBM","text":"","code":"estimate_colBiSBM(   netlist,   colsbm_model,   net_id = NULL,   distribution = \"bernoulli\",   nb_run = 3L,   global_opts = list(),   fit_opts = list(),   Z_init = NULL,   sep_BiSBM = NULL )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colBiSBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a colBiSBM on a collection of networks — estimate_colBiSBM","text":"netlist list matrices. colsbm_model colBiSBM use, one \"iid\", \"pi\", \"rho\", \"pirho\". net_id vector string, name networks. distribution string, emission distribution, either \"bernoulli\" (default) \"poisson\" (implemented) nb_run integer, number run algorithm . Default 3. global_opts Global options outer algorithm output. See details. fit_opts Fit options VEM algorithm. See details Z_init optional bi-dimensional list size Q1_max x Q2_max containing value list two vectors clusters memberships. Default NULL. sep_BiSBM pre-fitted sep_BiSBM. Used avoid end computations. best way obtain one extract fitted bisbmpop object. Defaults NULL.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colBiSBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a colBiSBM on a collection of networks — estimate_colBiSBM","text":"bisbmpop object listing collection models collection. networks","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colBiSBM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a colBiSBM on a collection of networks — estimate_colBiSBM","text":"list parameters global_opts essentially tunes exploration process. nb_cores integer number cores used parallelization. Default 1 verbosity integer verbosity (0, 1, 2, 3, 4). Default 1. 0 disable completely output function. Note: can access $joint_modelisation_preferred attribute check modelisation preferred Q1_max integer max size row explore. Default computed following formula: floor(log(sum(sapply(netlist, function() nrow()))) + 2) Q2_max integer max size columns explore. Default computed following formula: floor(log(sum(sapply(netlist, function() ncol()))) + 2) nb_models number models keep values Q1,Q2. Default 5. depth specifies large moving window . Default 1, meaning window go (Q1 - 1, Q2 - 1) (Q1 + 1, Q2 + 1) values square defined. plot_details integer control display exploration moving window process. Values 0 1. Default 1. max_pass maximum number moving window passes executed. Default 10. list parameters fit_opts used tune Variational Expectation Maximization algorithm. algo_ve string choose algorithm use variational estimation. Available: \"fp\" verbosity integer choose level verbosity fit procedure. Defaults 0. Available: 0,1 max_vem_steps integer setting number Variational Expectation-Maximization steps perform. Defaults 1000. minibatch boolean setting wether use \"minibatch\" like approach. set TRUE VEM networks optimized random orders. set FALSE optimized lexicographical order. Default TRUE. tolerance numeric, controlling tolerance criterion considered converged. Default 1e-6. greedy_exploration_max_steps maximum number iteration greedy exploration perform. Defaults 50. greedy_exploration_max_steps_without_improvement integer indicating number steps best model must change end greedy exploration. Defaults 5.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colBiSBM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a colBiSBM on a collection of networks — estimate_colBiSBM","text":"","code":"alpha1 <- matrix(c(0.8, 0.1, 0.2, 0.7), byrow = TRUE, nrow = 2) alpha2 <- matrix(c(0.8, 0.5, 0.5, 0.2), byrow = TRUE, nrow = 2) first_collection <- generate_bipartite_collection(   nr = 50, nc = 25,   pi = c(0.5, 0.5), rho = c(0.5, 0.5), alpha = alpha1, M = 2 ) second_collection <- generate_bipartite_collection(   nr = 50, nc = 25,   pi = c(0.5, 0.5), rho = c(0.5, 0.5), alpha = alpha2, M = 2 )  netlist <- append(first_collection, second_collection)  if (FALSE) { # \\dontrun{ # A collection where joint modelisation makes sense cl_joint <- estimate_colBiSBM(   netlist = first_collection,   colsbm_model = \"iid\",   global_opts = list(nb_cores = parallelly::availableCores(omit = 1L)) ) # A collection where joint modelisation doesn't make sense cl_separated <- estimate_colBiSBM(   netlist = netlist,   colsbm_model = \"iid\",   global_opts = list(nb_cores = parallelly::availableCores(omit = 1L)) ) } # }"},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colSBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a colSBM on a collection of networks — estimate_colSBM","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"Estimate colSBM collection networks","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"","code":"estimate_colSBM(   netlist,   colsbm_model,   net_id = NULL,   directed = NULL,   distribution = \"bernoulli\",   fit_sbm = NULL,   nb_run = 3L,   global_opts = list(),   fit_opts = list(),   fit_init = NULL )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"netlist list matrices. colsbm_model colSBM use, one \"iid\", \"pi\", \"delta\", \"deltapi\". net_id vector string, name networks. directed boolean, networks directed . distribution string, emission distribution, either \"bernoulli\" (default) \"poisson\" fit_sbm list fitted model using sbm package. Use speed initialization. nb_run integer, number run algorithm . global_opts Global options outer algorithm output fit_opts Fit options VEM algorithm fit_init use! Optional fit init initializing algorithm.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"bmpop object listing collection fitted models collection networks","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"","code":"# Trivial example with Gnp networks: Net <- lapply(   list(.7, .7, .2, .2),   function(p) {     A <- matrix(0, 15, 15)     A[lower.tri(A)][sample(15 * 14 / 2, size = round(p * 15 * 14 / 2))] <- 1     A <- A + t(A)   } ) if (FALSE) { # \\dontrun{ cl <- estimate_colSBM(Net,   colsbm_model = \"delta\",   directed = FALSE,   distribution = \"bernoulli\",   nb_run = 1 ) } # }"},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_best_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the best partition from the list of model given by the functions clusterize_networks() or clusterize_bipartite_networks(). — extract_best_partition","title":"Extract the best partition from the list of model given by the functions clusterize_networks() or clusterize_bipartite_networks(). — extract_best_partition","text":"Extract best partition list model given functions clusterize_networks() clusterize_bipartite_networks().","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_best_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the best partition from the list of model given by the functions clusterize_networks() or clusterize_bipartite_networks(). — extract_best_partition","text":"","code":"extract_best_partition(l, unnest = TRUE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_best_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the best partition from the list of model given by the functions clusterize_networks() or clusterize_bipartite_networks(). — extract_best_partition","text":"l list models obtained function  clusterize_networks() unnest boolean specifying returned object un-nested (thus loose exploration clustering structure) . Default TRUE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_best_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the best partition from the list of model given by the functions clusterize_networks() or clusterize_bipartite_networks(). — extract_best_partition","text":"list models giving best partition.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_best_partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the best partition from the list of model given by the functions clusterize_networks() or clusterize_bipartite_networks(). — extract_best_partition","text":"","code":"#' # Trivial example with Gnp networks: Net <- lapply(   list(.7, .7, .2, .2),   function(p) {     A <- matrix(0, 15, 15)     A[lower.tri(A)][sample(15 * 14 / 2, size = round(p * 15 * 14 / 2))] <- 1     A <- A + t(A)   } ) if (FALSE) { # \\dontrun{ cl <- clusterize_networks(Net,   colsbm_model = \"iid\",   directed = FALSE,   distribution = \"bernoulli\",   nb_run = 1 ) best_partition <- extract_best_partition(cl) } # }"},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_clustering_dendrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to tree — extract_clustering_dendrogram","title":"Convert to tree — extract_clustering_dendrogram","text":"Convert tree","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_clustering_dendrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to tree — extract_clustering_dendrogram","text":"","code":"extract_clustering_dendrogram(   clustering,   invalid_char_to_replace_regex = \"\\\\(|\\\\)\",   net_id_width = 20L )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_clustering_dendrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to tree — extract_clustering_dendrogram","text":"clustering nested list given one clusterize function extract clustering tree. invalid_char_to_replace_regex regex string used stringr::str_replace_all() clean net_ids processed. net_id_width integer truncate long net_id prevent messy plots. Defaults 20.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_clustering_dendrogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to tree — extract_clustering_dendrogram","text":"dendrogram object","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/extract_clustering_dendrogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to tree — extract_clustering_dendrogram","text":"function converts nested list given clusterize functions Newick tree format read phylogram::read.dendrogram. code adapted StackOverflow answer : https://stackoverflow.com/questions/45091691/convert--nested-list--dendrogram-tree--r","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":null,"dir":"Reference","previous_headings":"","what":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"method plot fitBipartite objects method plot fitBipartite objects","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"R6 Class object, fitted population netowrks sbm $optimize() done","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"n list two dimensions, size M rows cols M Number networks List incidence Matrix size n[[1]][m]xn[[2]][m] mask List M masks, indicating NAs matrices. 1 NA, 0 else nonNAs List M masks, indicating non NAs matrices. 1 - mask, 0 NA, 1 non NA nb_inter vector length M number unique non NA entries Q Number clusters, vectors size2 tau List size M list two variational parameters. n[[1]][m]xQ matrices n[[2]][m]xQ matrices alpha Matrix size QxQ, connection parameters pi List M vectors size Q, mixture parameters pim List M vectors size Q, mixture parameters case free_mixture e Vector size M, sum unique entries emqr List M QxQ matrix, sum edges q r m, ie edges observed. nmqr list M QxQ matrix, number entries q r m, ie possible edges. alpham list M QxQ matrix, classic sbm parameters. free_mixture_row boolean indicating free mixture rows free_mixture_col boolean indicating free mixture columns weight vector size M weighted likelihood distribution Emission distribution either : \"poisson\" \"bernoulli\" mloss Loss M step VEM vloss Loss VE step VEM vbound variational bound entropy entropy variational distribution net_id vector containing \"ids\" names networks (none given, set number list) df_mixture degrees freedom mixture parameters pi,used compute penalty df_connect degrees freedom connection parameters alpha,used compute penalty Cpi list matrices size Qd x M containing TRUE (1) FALSE (0) d-th dimension cluster represented network m Calpha corresponding support connectivity parameters computed Cpi. logfactA quantity used Poisson probability distribution init_method initialization method used first clustering penalty penalty computed based number parameters Z clusters memberships, list size M two matrices : 1 rows clusters memberships 2 columns clusters memberships MAP Maximum posteriori MAP_parameters MAP params ICL Stores ICL model BICL Stores BICL model fit_opts Fit parameters, used determine fitting method/ step_counter Counts number passes greedy_exploration_starting_point Stores coordinates Q1 & Q2 greedy exploration  keep track starting_point effective_clustering_list list size M storing number clusters contains least one point. Used safety checks. clustering_is_complete boolean used know model real blocks match expected blocks. tested_taus vector taus values taus given init_clust tested_taus_vbound vector vbound values taus given init_clust has_converged boolean, indicating wether current fit object VEM converged ","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nb_nodes Returns n list number nodes per network nb_blocks Returns Q vector 2 coordinates, Q1 Q2 row blocks column blocks support Returns Cpi, list M boolean matrices indicating blocks populated prob_memberships Returns tau, probabilities memberships \"posteriori\", seeing data parameters Returns list parameters model, alpha, pi rho pred_dyads Predicted dyads estimated probabilities parameters memberships block memberships","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"fitBipartiteSBMPop$new() fitBipartiteSBMPop$compute_MAP() fitBipartiteSBMPop$vb_tau_alpha() fitBipartiteSBMPop$vb_tau_pi() fitBipartiteSBMPop$entropy_tau() fitBipartiteSBMPop$compute_vbound() fitBipartiteSBMPop$compute_penalty() fitBipartiteSBMPop$compute_icl() fitBipartiteSBMPop$compute_entropy() fitBipartiteSBMPop$compute_BICL() fitBipartiteSBMPop$update_MAP_parameters() fitBipartiteSBMPop$fixed_point_tau() fitBipartiteSBMPop$update_pim() fitBipartiteSBMPop$update_pi() fitBipartiteSBMPop$update_alpham() fitBipartiteSBMPop$update_alpha() fitBipartiteSBMPop$taus_order() fitBipartiteSBMPop$init_clust() fitBipartiteSBMPop$m_step() fitBipartiteSBMPop$ve_step() fitBipartiteSBMPop$update_mqr() fitBipartiteSBMPop$make_permutation() fitBipartiteSBMPop$compute_effective_clustering() fitBipartiteSBMPop$optimize() fitBipartiteSBMPop$reorder_parameters() fitBipartiteSBMPop$show() fitBipartiteSBMPop$print() fitBipartiteSBMPop$plot() fitBipartiteSBMPop$clone()","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"Initializes fitBipartiteSBMPop object","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$new(   A = NULL,   Q = NULL,   Z = NULL,   mask = NULL,   net_id = NULL,   distribution = NULL,   free_mixture_row = TRUE,   free_mixture_col = TRUE,   Cpi = NULL,   Calpha = NULL,   init_method = \"spectral\",   weight = NULL,   greedy_exploration_starting_point = NULL,   fit_opts = list(algo_ve = \"fp\", minibatch = TRUE, verbosity = 1) )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"List incidence Matrix size n[[2]][m]xn[[2]][m] Q vector size 2 number row blocks column blocks Z clusters memberships, list size M two matrices : 1 rows clusters memberships 2 columns clusters memberships mask List M masks, indicating NAs matrices. 1 NA, 0 else net_id vector containing \"ids\" names networks (none given, set number list) distribution Emission distribution either : \"poisson\" \"bernoulli\" free_mixture_row boolean indicating free mixture rows free_mixture_col boolean indicating free mixture columns Cpi list matrices size Qd x M containing TRUE (1) FALSE (0) d-th dimension cluster represented network m Calpha corresponding support connectivity parameters computed Cpi. init_method initialization method used first clustering weight vector size M weighted likelihood greedy_exploration_starting_point Stores coordinates Q1 & Q2 greedy exploration  keep track starting_point fit_opts Fit parameters, used determine fitting method/ Method compute maximum posteriori Z clustering","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$compute_MAP()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores values Computes portion vbound tau alpha","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$vb_tau_alpha(m, MAP = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m id network compute MAP Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"computed quantity. Computes portion vbound tau pi rho","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$vb_tau_pi(m, MAP = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m id network compute MAP Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"computed quantity. Computes entropy model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$entropy_tau(m)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m id network compute","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"computed quantity. Computes variational bound (vbound)","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$compute_vbound()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"variational bound model. Computes penalty model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$compute_penalty()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"computed penalty using formulae. Computes ICL criterion","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$compute_icl(MAP = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"MAP Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"ICL model. Computes entropy variational distribution","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$compute_entropy()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"entropy variational distribution computed VEM Computes BICL criterion","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$compute_BICL(MAP = TRUE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"MAP Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"BICL model. Updates MAP parameters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$update_MAP_parameters()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores values Method update tau values","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"method-fixed-point-tau-","dir":"Reference","previous_headings":"","what":"Method fixed_point_tau()","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"really fixed point tau^1 depends tau^2.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$fixed_point_tau(m, d, tol = self$fit_opts$tolerance)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m number network netlist d dimension update tol tolerance stop iterating. Defaults self$fit_opts$tolerance","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"new tau values Computes pi per network, known pim","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$update_pim(m, MAP = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m number network netlist MAP boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores values Computes pi whole model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$update_pi(MAP = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"MAP boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"pi stores values Computes alpha per network, known alpham","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$update_alpham(m, MAP = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m number network netlist MAP boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"alpham stores values Computes alpha whole model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$update_alpha(MAP = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"MAP boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"alpha stores values","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"method-taus-order-","dir":"Reference","previous_headings":"","what":"Method taus_order()","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"goal function test different values tau select best one sense BICL (vbound) ?","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$taus_order(taus_list)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"taus_list List possible taus provide ranking","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"vector order taus regard vbound","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"method-init-clust-","dir":"Reference","previous_headings":"","what":"Method init_clust()","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"Initialize clusters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$init_clust()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores M step VEM","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$m_step(MAP = FALSE, tol = self$fit_opts$tolerance, ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"MAP boolean wether use MAP parameters , defaults FALSE tol tolerance stop iterating defaults self$fit_opts$tolerance ... parameters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores values optimization version VE step VEM currently placeholder","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$ve_step(m, max_iter = 2, tol = self$fit_opts$tolerance, ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m number network netlist max_iter maximum number iterations, default 2 tol tolerance stop iterating defaults self$fit_opts$tolerance ... parameters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores values Updates mqr quantities","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"method-update-mqr-","dir":"Reference","previous_headings":"","what":"Method update_mqr()","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"Namely, updates emqr nmqr.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$update_mqr(m)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"m number network netlist TODO Investigate supposed ","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$make_permutation()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing Computes number blocks effectively populated","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$compute_effective_clustering()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores value Perform whole initialization VEM algorithm","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$optimize(   max_step = self$fit_opts$max_vem_steps,   tol = self$fit_opts$tolerance,   ... )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"max_step maximum number steps perform optimization tol tolerance stop iterating, default self$fit_opts$tolerance ... parameters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing Reorder blocks putting \"strongest\" ones first order coherent ordering blocks SBM LBM visualisation.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$reorder_parameters()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; stores new ordering message printed one prints object","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$show(type = \"Fitted Collection of Bipartite SBM\")"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"type title message. print method","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$print()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"nothing; print console","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$plot(   type = \"graphon\",   oRow = NULL,   oCol = NULL,   mixture = FALSE,   net_id = NULL,   values = FALSE,   ... )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"type type plot. \"graphon\", \"meso\" \"block\". oRow reordering row blocks. oCol reordering column blocks. mixture block proportions network plotted well? net_id Use plot one network \"graphon\" view. values Wether plot values alpha, pi rho representation. ... argument passed","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"plot, ggplot2 object.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"objects class cloneable method.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"","code":"fitBipartiteSBMPop$clone(deep = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitBipartiteSBMPop.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"The method to plot the fitBipartite objects — fitBipartiteSBMPop","text":"deep Whether make deep clone.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":null,"dir":"Reference","previous_headings":"","what":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"R6 Class object, fitted population netowrks sbm $optimize() done R6 Class object, fitted population netowrks sbm $optimize() done","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"n list size M number nodes per network M Number networks List incidence matrices size n \\times n mask List M masks, indicating NAs matrices. 1 NA, 0 else nb_inter vector length M number unique non NA entries directed boolean indicating networks directed Q integer indicating number blocks tau List length M, variational parameters n[m]xQ[m] matrices alpha Matrix size QxQ, connection parameters delta Vector M,  density parameters delta[1] = 1 pi List M vectors size Q, mixture parameters e Vector size M, sum unique entries emqr List M QxQ matrix, sum edges q r m nmqr List M QxQ matrix, number entries q r m pim List M vectors size Q, mixture parameters (pi_tilde) alpham list M QxQ matrix, classic sbm parameters (alpha_tilde) free_mixture boolean indicating model free mixture free_density boolean indicating model free density weight vector size M weighted likelihood distribution emission distribution, either bernoulli poisson Cpi list matrices size Q x M containing TRUE (1) FALSE (0) cluster represented network m Calpha corresponding support connectivity parameters computed Cpi. mloss Loss M step VEM vloss Loss VE step VEM vbound variational bound net_id vector containing \"ids\" names networks (none given, set number list) df_mixture degrees freedom mixture parameters pi,used compute penalty df_connect degrees freedom connection parameters alpha,used compute penalty df_density degrees freedom density parameters delta, used compute penalty logfactA quantity used Poisson probability distribution init_method initialization method used first clustering penalty penalty computed based number parameters Z clusters memberships, list size M two matrices : 1 rows clusters memberships 2 columns clusters memberships map Maximum posteriori map_parameters MAP params ICL Stores ICL model penalty_clustering Unused attribute BICL Stores BICL model net_clustering Unused parameter counter_merge counter merge (backward) steps counter_split counter splitting (forward) steps fit_opts Fit parameters, used determine fitting method/","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"dircoef coefficients used change network directed nb_nodes Returns n list number nodes per network nb_clusters Returns Q integer number blocks support Returns Cpi, list M boolean matrices indicating blocks populated memberships Returns tau, probabilities memberships \"posteriori\", seeing data parameters Returns list parameters model, alpha, pi delta pred_dyads Predicted dyads estimated probabilities parameters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"fitSimpleSBMPop$new() fitSimpleSBMPop$compute_map() fitSimpleSBMPop$objective() fitSimpleSBMPop$vb_tau_alpha() fitSimpleSBMPop$vb_tau_pi() fitSimpleSBMPop$entropy_tau() fitSimpleSBMPop$fn_vb_alpha_delta() fitSimpleSBMPop$gr_vb_alpha_delta() fitSimpleSBMPop$eval_g0_vb_alpha_delta() fitSimpleSBMPop$eval_jac_g0_vb_alpha_delta() fitSimpleSBMPop$update_alpha_delta() fitSimpleSBMPop$compute_vbound() fitSimpleSBMPop$compute_penalty() fitSimpleSBMPop$compute_icl() fitSimpleSBMPop$compute_BICL() fitSimpleSBMPop$compute_exact_icl() fitSimpleSBMPop$compute_exact_icl_iid() fitSimpleSBMPop$update_map_parameters() fitSimpleSBMPop$fixed_point_tau() fitSimpleSBMPop$fixed_point_alpha_delta() fitSimpleSBMPop$update_pi() fitSimpleSBMPop$update_pim() fitSimpleSBMPop$update_alpham() fitSimpleSBMPop$update_alpha() fitSimpleSBMPop$init_clust() fitSimpleSBMPop$make_permutation() fitSimpleSBMPop$m_step() fitSimpleSBMPop$ve_step() fitSimpleSBMPop$update_mqr() fitSimpleSBMPop$optimize() fitSimpleSBMPop$show() fitSimpleSBMPop$print() fitSimpleSBMPop$plot() fitSimpleSBMPop$clone()","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"Initializes fitBipartiteSBMPop object","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$new(   A = NULL,   Q = NULL,   Z = NULL,   mask = NULL,   net_id = NULL,   distribution = \"bernoulli\",   free_mixture = TRUE,   free_density = TRUE,   directed = NULL,   init_method = \"spectral\",   weight = NULL,   Cpi = NULL,   Calpha = NULL,   logfactA = NULL,   fit_opts = list(algo_ve = \"fp\", approx_pois = FALSE, minibatch = TRUE, verbosity = 1) )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"List incidence Matrix size n[[2]][m]xn[[2]][m] Q number blocks Z block memberships, list size M two matrices : 1 rows clusters memberships 2 columns clusters memberships mask List M masks, indicating NAs matrices. 1 NA, 0 else net_id vector containing \"ids\" names networks (none given, set number list) distribution Emission distribution either : \"poisson\" \"bernoulli\" free_mixture boolean indicating free mixture free_density boolean indicating free_density directed boolean specifying networks directed init_method initialization method used first clustering weight vector size M weighted likelihood Cpi list matrices size Qd x M containing TRUE (1) FALSE (0) d-th dimension cluster represented network m Calpha corresponding support connectivity parameters computed Cpi. logfactA quantity used Poisson probability distribution fit_opts Fit parameters, used determine fitting method/ Method compute maximum posteriori Z clustering greedy_exploration_starting_point Stores coordinates Q1 & Q2 greedy exploration  keep track starting_point","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_map()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values Objective function","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$objective()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"evaluation function Computes portion vbound tau alpha","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$vb_tau_alpha(m, map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m id network compute map Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"computed quantity.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$vb_tau_pi(m, map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m id network compute map Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"computed quantity. Computes entropy model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$entropy_tau(m)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m id network compute","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"computed quantity. Objective function variational bound regarding alpha delta parameters.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$fn_vb_alpha_delta(par, emqr, nmqr)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"par parameters, alpha delta combined one big vector. emqr List M QxQ matrix, sum edges q r m nmqr List M QxQ matrix, number entries q r m","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"evaluation function Gradient objective function variational bound regarding alpha delta parameters.","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$gr_vb_alpha_delta(par, emqr, nmqr)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"par parameters, alpha delta combined one big vector. emqr List M QxQ matrix, sum edges q r m nmqr List M QxQ matrix, number entries q r m","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"evaluation function Constraint","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$eval_g0_vb_alpha_delta(par, emqr, nmqr)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"par parameters, alpha delta combined one big vector. emqr List M QxQ matrix, sum edges q r m nmqr List M QxQ matrix, number entries q r m","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"evaluation function Jacobian constraint","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$eval_jac_g0_vb_alpha_delta(par, emqr, nmqr)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"par parameters, alpha delta combined one big vector. emqr List M QxQ matrix, sum edges q r m nmqr List M QxQ matrix, number entries q r m","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"evaluation function Updates alpha delta parameters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_alpha_delta(map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"map Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values Computes variational bound (vbound)","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_vbound()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"variational bound model. Computes penalty model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_penalty()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"computed penalty using formulae. Computes ICL criterion","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_icl(map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"map Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"ICL model. Computes BICL criterion","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_BICL(map = TRUE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"map Wether use MAP parameters , boolean, defaults FALSE.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"ICL model. Computes exact ICL criterion","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_exact_icl()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"exact ICL model. Computes exact ICL criterion iid","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_exact_icl_iid()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"exact ICL iid model. Updates MAP parameters","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_map_parameters()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values Method update tau values fixed-point algorithm","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$fixed_point_tau(m, max_iter = 1, tol = 0.01)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m number network netlist max_iter maximum number iterations perform, defaults 1 tol tolerance stop iterating defaults 1e-2","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"new tau values Fixed point update alpha delta","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$fixed_point_alpha_delta(   map = FALSE,   max_iter = 50,   tol = 1e-06 )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"map boolean wether use MAP parameters , defaults FALSE max_iter maximum number iterations, default 50 tol tolerance stop iterating","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values Computes pi whole model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_pi(m, map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m number network netlist map boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"pi stores values Computes pi per network, known pim","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_pim(m, map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m number network netlist map boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values Computes alpha per network, known alpham","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_alpham(m, map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m number network netlist map boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"alpham stores values Computes alpha whole model","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_alpha(map = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"map boolean wether use MAP parameters , defaults FALSE","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"alpha stores values","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"method-init-clust-","dir":"Reference","previous_headings":"","what":"Method init_clust()","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"Initialize clusters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$init_clust()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"method-make-permutation-","dir":"Reference","previous_headings":"","what":"Method make_permutation()","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"TODO Remove","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$make_permutation()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"method-m-step-","dir":"Reference","previous_headings":"","what":"Method m_step()","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"M step VEM","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$m_step(map = FALSE, max_iter = 100, tol = 0.001, ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"map boolean wether use MAP parameters , defaults FALSE max_iter maximum number iterations, default 2 tol tolerance stop iterating defaults 1e-3 ... parameters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values optimization version VE step VEM currently placeholder","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$ve_step(m, max_iter = 20, tol = 0.001, ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m number network netlist max_iter maximum number iterations, default 2 tol tolerance stop iterating defaults 1e-3 ... parameters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values Updates mqr quantities","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"method-update-mqr-","dir":"Reference","previous_headings":"","what":"Method update_mqr()","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"Namely, updates emqr nmqr.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_mqr(m)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"m number network netlist Perform whole initialization VEM algorithm","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$optimize(max_step = self$fit_opts$max_step, tol = 0.001, ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"max_step maximum number steps perform optimization tol tolerance stop iterating, default 1e-3 ... parameters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; stores values message printed one prints object","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$show(type = \"Fitted Collection of Simple SBM\")"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"type title message. print method","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$print()"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-26","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"nothing; print console Plot method","code":""},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$plot(   type = \"graphon\",   ord = NULL,   mixture = FALSE,   net_id = NULL,   ... )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"type type plot. \"graphon\", \"meso\" \"block\". ord reordering blocks. mixture block proportions network plotted well? net_id id network plot. Used plot network \"graphon\" view. ... arguments passed","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"returns-27","dir":"Reference","previous_headings":"","what":"Returns","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"plot, ggplot2 object.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"objects class cloneable method.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$clone(deep = FALSE)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm once $optimize() is done — fitSimpleSBMPop","text":"deep Whether make deep clone.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/foodwebs.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of 8 food webs — foodwebs","title":"A collection of 8 food webs — foodwebs","text":"dataset containing 8 stream food webs coming study.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/foodwebs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of 8 food webs — foodwebs","text":"","code":"foodwebs"},{"path":"https://chabert-liddel.github.io/colSBM/reference/foodwebs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A collection of 8 food webs — foodwebs","text":"named list 8 binary matrices: M_Martins 105 species 343 feeding interactions NC_Cooper 58 species 126 feeding interactions NC_Herlzier 71 species 148 feeding interactions NZ_Venlaw 69 species 187 feeding interactions NZ_Berwick 79 species 240 feeding interactions NZ_North_Col 78 species 241 feeding interactions NZ_Powder 78 species 268 feeding interactions NZ_Trib 98 species 629 feeding interactions","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/foodwebs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A collection of 8 food webs — foodwebs","text":"http://www.web--life.es/","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/foodwebs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A collection of 8 food webs — foodwebs","text":"Reference: Thompson, R. M. Townsend, C. R. (2003), Impacts stream food webs native exotic forest: intercontinental comparison. Ecology 84(1): 145-161","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_bipartite_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate collection of bipartite networks — generate_bipartite_collection","title":"Generate collection of bipartite networks — generate_bipartite_collection","text":"Generate collection bipartite networks","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_bipartite_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate collection of bipartite networks — generate_bipartite_collection","text":"","code":"generate_bipartite_collection(   nr,   nc,   pi,   rho,   alpha,   M,   model = \"iid\",   distribution = \"bernoulli\",   return_memberships = FALSE )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_bipartite_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate collection of bipartite networks — generate_bipartite_collection","text":"nr number row nodes  vector specifying number row nodes M networks nc number column nodes  vector specifying number column nodes M networks pi vector probability belong row clusters rho vector probability belong columns clusters alpha matrix connectivity two clusters M number networks generate model colBiSBM model use. Available: \"iid\", \"pi\", \"rho\", \"pirho\" distribution emission distribution : \"bernoulli\" \"poisson\" return_memberships boolean choose whether function returns list containing memberships incidence matrices just incidence matrices. Defaults FALSE, matrices returned.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_bipartite_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate collection of bipartite networks — generate_bipartite_collection","text":"list M lists, contains : $incidence_matrix, $row_blockmemberships, $col_blockmemberships","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_bipartite_collection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate collection of bipartite networks — generate_bipartite_collection","text":"model parameters set iid shuffle provided pi rho","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_unipartite_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate collection of unipartite — generate_unipartite_collection","title":"Generate collection of unipartite — generate_unipartite_collection","text":"Generate collection unipartite","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_unipartite_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate collection of unipartite — generate_unipartite_collection","text":"","code":"generate_unipartite_collection(   n,   pi,   alpha,   M,   distribution = \"bernoulli\",   return_memberships = FALSE )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_unipartite_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate collection of unipartite — generate_unipartite_collection","text":"n number nodes vector nodes per network pi vector probability belong clusters alpha matrix connectivity two clusters M number networks generate distribution emission distribution, either \"bernoulli\" \"poisson\" return_memberships Boolean, return memberships .","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_unipartite_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate collection of unipartite — generate_unipartite_collection","text":"list M lists, contains : $adjacency_matrix, $clustering","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/generate_unipartite_collection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate collection of unipartite — generate_unipartite_collection","text":"n single value, value replicated M networks. vector, must size M, specifying number nodes network.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://chabert-liddel.github.io/colSBM/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bisbmpop.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the state-space exploration plot for a bipartite collection object — plot.bisbmpop","title":"Plot the state-space exploration plot for a bipartite collection object — plot.bisbmpop","text":"Plot state-space exploration plot bipartite collection object","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bisbmpop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the state-space exploration plot for a bipartite collection object — plot.bisbmpop","text":"","code":"# S3 method for class 'bisbmpop' plot(x, ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bisbmpop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the state-space exploration plot for a bipartite collection object — plot.bisbmpop","text":"x bisbmpop object. ... arguments pass plot.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bisbmpop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the state-space exploration plot for a bipartite collection object — plot.bisbmpop","text":"plot, ggplot2 object.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bmpop.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the trace of the different criteria in function of the number of clusters — plot.bmpop","title":"Plot the trace of the different criteria in function of the number of clusters — plot.bmpop","text":"Plot trace different criteria function number clusters","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bmpop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the trace of the different criteria in function of the number of clusters — plot.bmpop","text":"","code":"# S3 method for class 'bmpop' plot(x, type = \"trace\", ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bmpop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the trace of the different criteria in function of the number of clusters — plot.bmpop","text":"x bmpop object. type type plot. \"trace\". ... argument passed","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.bmpop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the trace of the different criteria in function of the number of clusters — plot.bmpop","text":"plot, ggplot2 object.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitBipartiteSBMPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot matrix summaries of the collection mesoscale structure — plot.fitBipartiteSBMPop","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitBipartiteSBMPop","text":"Plot matrix summaries collection mesoscale structure","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitBipartiteSBMPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitBipartiteSBMPop","text":"","code":"# S3 method for class 'fitBipartiteSBMPop' plot(   x,   type = \"graphon\",   oRow = NULL,   oCol = NULL,   mixture = FALSE,   values = FALSE,   net_id = 1,   ... )"},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitBipartiteSBMPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitBipartiteSBMPop","text":"x fitBipartiteSBMPop object. type type plot. \"graphon\", \"meso\" \"block\". oRow reordering row blocks. oCol reordering column blocks. mixture block proportions network plotted well? values Wether plot values alpha, pi rho representation. net_id Use plot network \"graphon\" view. ... argument passed","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitBipartiteSBMPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitBipartiteSBMPop","text":"plot, ggplot2 object.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitBipartiteSBMPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitBipartiteSBMPop","text":"","code":"alpha1 <- matrix(c(0.8, 0.1, 0.2, 0.7), byrow = TRUE, nrow = 2)  first_collection <- generate_bipartite_collection(   nr = 50, nc = 25,   pi = c(0.5, 0.5), rho = c(0.5, 0.5),   alpha = alpha1, M = 2 )  if (FALSE) { # \\dontrun{ # A collection where joint modelisation makes sense cl_joint <- estimate_colBiSBM(   netlist = first_collection,   colsbm_model = \"iid\",   global_opts = list(nb_cores = parallelly::availableCores(omit = 1L)) ) plot(cl_joint$best_fit) } # }"},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"Plot matrix summaries collection mesoscale structure","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"","code":"# S3 method for class 'fitSimpleSBMPop' plot(x, type = \"graphon\", ord = NULL, mixture = FALSE, net_id = 1, ...)"},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"x fitSimpleSBMPOP object. type type plot. \"graphon\", \"meso\" \"block\". ord reordering blocks. mixture block proportions network plotted well? net_id Use plot network \"graphon\" view. ... argument passed","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"plot, ggplot2 object.","code":""},{"path":"https://chabert-liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"","code":"# Trivial example with Gnp networks: Net <- lapply(   list(.7, .7, .2, .2),   function(p) {     A <- matrix(0, 15, 15)     A[lower.tri(A)][sample(15 * 14 / 2, size = round(p * 15 * 14 / 2))] <- 1     A <- A + t(A)   } ) if (FALSE) { # \\dontrun{ cl <- estimate_colSBM(Net,   colsbm_model = \"delta\",   directed = FALSE,   distribution = \"bernoulli\",   nb_run = 1 ) plot(cl$best_fit) } # }"},{"path":"https://chabert-liddel.github.io/colSBM/news/index.html","id":"colsbm-040","dir":"Changelog","previous_headings":"","what":"colSBM 0.4.0","title":"colSBM 0.4.0","text":"Adding colBiSBM, supporting bipartite collections Changing parallelization support, using colsbm_lapply generic function user can customize backend (parallel, future) Adding dorebipartite new dataset containing bipartite collection dataset","code":""},{"path":"https://chabert-liddel.github.io/colSBM/news/index.html","id":"colsbm-030","dir":"Changelog","previous_headings":"","what":"colSBM 0.3.0","title":"colSBM 0.3.0","text":"Improved generic plot() functions","code":""},{"path":"https://chabert-liddel.github.io/colSBM/news/index.html","id":"colsbm-021","dir":"Changelog","previous_headings":"","what":"colSBM 0.2.1","title":"colSBM 0.2.1","text":"BREAKING CHANGE: emission distribution arguments now named “distribution” instead “model” Fixed error extract_best_partition() Fixed bug using “spectal_init” global_opts arguement","code":""},{"path":"https://chabert-liddel.github.io/colSBM/news/index.html","id":"colsbm-020","dir":"Changelog","previous_headings":"","what":"colSBM 0.2.0","title":"colSBM 0.2.0","text":"Added sparse matrix Matrix package leading less intensive memory usage Added extract_best_partition() function Improved documentation, references vignette","code":""},{"path":[]},{"path":[]},{"path":"https://chabert-liddel.github.io/colSBM/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"colSBM 0.1.0","text":"Changed name EstimateBMPOP() clusterize_networks() internal functions exported anymore","code":""},{"path":"https://chabert-liddel.github.io/colSBM/news/index.html","id":"cosmetic-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Cosmetic changes","title":"colSBM 0.1.0","text":"Cleaned documentation user functions Added NEWS.md file track changes package.","code":""}]
