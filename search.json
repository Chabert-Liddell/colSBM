[{"path":"https://Chabert-Liddel.github.io/colSBM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Saint-Clair Chabert-Liddell Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/articles/tutorial.html","id":"estimation-with-colsbm","dir":"Articles","previous_headings":"","what":"Estimation with colSBM","title":"Tutorial on food webs","text":"load list 8 foodwebs. binary directed networks different number species. First, going model jointly first \\(3\\) networks, using iid-colSBM model.  can look variational bound model selection criteria evolve number clusters. , BICL criterion selects Q = 6 blocks.","code":"# global_opts = list(nb_cores = 1L,  #                    nb_models = 5L,  #                    nb_init = 10L, #                    depth = 2L, #                    verbosity = 1,  #                    spectral_init = FALSE, #                    Q_max = 8L,  #                    plot_details = 1)  set.seed(1234) res_fw_iid <- estimate_colSBM(netlist = foodwebs[1:3], # A list of networks                               colsbm_model = \"iid\", # The name of the model                               directed = TRUE, # Foodwebs are directed networks                               net_id = names(foodwebs)[1:3], # Name of the networks                               nb_run = 1L, # Nmber of runs of the algorithm                               global_opts = list(verbosity = 0,                                                  plot_detail = 0,                                                  Q_max = 8) #Max number of clusters                               ) #> Please install the progress-package in order to get a progress bar. plot(res_fw_iid) best_fit <- res_fw_iid$best_fit"},{"path":"https://Chabert-Liddel.github.io/colSBM/articles/tutorial.html","id":"results-and-analysis","dir":"Articles","previous_headings":"","what":"Results and analysis","title":"Tutorial on food webs","text":"useful fields analyze results. can get: estimation model parameters block memberships: prediction dyads networks, network number 3. goal dyad prediction, use model = \"delta\", instead model = \"iid\". can also plot networks individually:  make different plots exhibit mesoscale structure:","code":"best_fit #> Fitted Collection of Simple SBM -- bernoulli variant for 3 networks  #> ===================================================================== #> Dimension = ( 105 58 71 ) - ( 6 ) blocks. #> BICL =  -1891.194  -- #Empty blocks :  0   #> ===================================================================== #> * Useful fields  #>   $model, $nb_nodes, $nb_clusters, $support, $Z  #>   $memberships, $parameters, $BICL, $vbound, $pred_dyads best_fit$parameters #> $alpha #>              [,1]         [,2]         [,3]         [,4]         [,5] #> [1,] 1.177066e-01 2.319504e-09 4.966808e-02 5.956519e-10 5.177928e-03 #> [2,] 8.180531e-01 2.916666e-08 7.078981e-01 8.646223e-10 7.832613e-01 #> [3,] 1.005702e-02 1.101402e-10 1.924929e-04 5.733420e-12 4.142494e-05 #> [4,] 7.382175e-02 1.442146e-09 8.821942e-03 7.954465e-11 1.731919e-01 #> [5,] 8.775965e-03 3.406594e-10 9.177182e-04 1.368194e-10 8.265633e-07 #> [6,] 1.683914e-05 1.024691e-10 7.797809e-06 5.635873e-12 4.255687e-09 #>             [,6] #> [1,] 0.386674125 #> [2,] 0.532683794 #> [3,] 0.019487618 #> [4,] 0.002196643 #> [5,] 0.083575614 #> [6,] 0.032984541 #>  #> $pi #> $pi[[1]] #> [1] 0.08898380 0.02564103 0.18892024 0.45470474 0.15414568 0.08760451 #>  #> $pi[[2]] #> [1] 0.08898380 0.02564103 0.18892024 0.45470474 0.15414568 0.08760451 #>  #> $pi[[3]] #> [1] 0.08898380 0.02564103 0.18892024 0.45470474 0.15414568 0.08760451 #>  #>  #> $delta #> [1] 1 1 1 best_fit$Z #> [[1]] #>   [1] 2 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #>  [38] 4 4 4 4 4 4 4 4 4 4 4 6 1 3 6 5 5 3 5 6 1 5 1 3 3 5 5 5 1 3 1 5 3 5 3 6 3 #>  [75] 1 3 5 5 1 1 3 3 6 3 3 3 3 5 5 3 3 5 5 5 5 5 3 1 3 3 6 6 3 6 3 #>  #> [[2]] #>  [1] 2 4 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 5 6 6 3 3 5 5 3 1 #> [39] 3 1 5 5 1 5 5 6 3 3 5 5 6 3 3 6 3 5 5 6 #>  #> [[3]] #>  [1] 2 2 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 #> [39] 1 6 5 3 5 3 5 3 3 3 3 6 5 5 3 6 5 1 1 3 3 5 3 5 3 5 3 3 3 3 3 6 6 best_fit$pred_dyads[[3]][1:10, 1:5] #>               [,1]         [,2]        [,3]         [,4]         [,5] #>  [1,] 0.000000e+00 3.200856e-08 0.023062008 1.911173e-06 9.890801e-09 #>  [2,] 3.200856e-08 0.000000e+00 0.023062008 1.911173e-06 9.890801e-09 #>  [3,] 1.708061e-09 1.708061e-09 0.000000000 1.724857e-07 9.105620e-10 #>  [4,] 1.700181e-09 1.700181e-09 0.001588078 0.000000e+00 8.956540e-10 #>  [5,] 1.700178e-09 1.700178e-09 0.001588076 1.719226e-07 0.000000e+00 #>  [6,] 1.700178e-09 1.700178e-09 0.001588076 1.719226e-07 8.956513e-10 #>  [7,] 1.700178e-09 1.700178e-09 0.001588076 1.719226e-07 8.956513e-10 #>  [8,] 1.680387e-09 1.680387e-09 0.001570470 1.700383e-07 8.857174e-10 #>  [9,] 1.700178e-09 1.700178e-09 0.001588076 1.719226e-07 8.956513e-10 #> [10,] 1.700178e-09 1.700178e-09 0.001588076 1.719226e-07 8.956519e-10 plot(res_fw_iid$best_fit, type = \"block\", net_id = 1) +    plot(res_fw_iid$best_fit, type = \"block\", net_id = 2) +   plot(res_fw_iid$best_fit, type = \"block\", net_id = 3) plot(res_fw_iid$best_fit, type = \"graphon\") plot(res_fw_iid$best_fit, type = \"meso\", mixture = TRUE) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3`"},{"path":"https://Chabert-Liddel.github.io/colSBM/articles/tutorial.html","id":"clustering-of-networks","dir":"Articles","previous_headings":"","what":"Clustering of networks","title":"Tutorial on food webs","text":"Let simulate directed networks lower triangular structure looks alike foodwebs. obtain list 3 models. first one full collection, second third one 3 foodwebs three collected networks. plot mesoscale structure obtained group simulated networks. can extract best partition: plot mesoscale structure whole collection following:  can compare mesoscale structures 2 groups:","code":"set.seed(1234) alpha <- matrix(c(.05, .01, .01, .01,                   .3, .05, .01, .01,                   .5, .4, .05, .01,                   .1, .8, .1, .05), 4, 4, byrow = TRUE) pi <- c(.1, .2, .6, .1) sim_net <-    replicate(3,              {X <-                sbm::sampleSimpleSBM(100, blockProp = pi, connectParam = list(mean = alpha),                       directed = TRUE)             X$rNetwork             X$networkData}, simplify = FALSE) set.seed(1234) net_clust <- clusterize_networks(netlist = c(foodwebs[1:3], sim_net), # A list of networks                               colsbm_model = \"iid\", # The name of the model                               directed = TRUE, # Foodwebs are directed networks                               net_id = c(names(foodwebs)[1:3], \"sim1\", \"sim2\", \"sim3\"), # Name of the networks                               nb_run = 1L, # Nmber of runs of the algorithm                               global_opts = list(verbosity = 0,                                                  plot_details = 0,                                                  Q_max = 9) #Max number of clusters                               ) #> Please install the progress-package in order to get a progress bar. #> Please install the progress-package in order to get a progress bar. #> Please install the progress-package in order to get a progress bar. #> Please install the progress-package in order to get a progress bar. #> Please install the progress-package in order to get a progress bar. #> Please install the progress-package in order to get a progress bar. #> Please install the progress-package in order to get a progress bar. best_partition <- extract_best_partition(net_clust) plot(net_clust[[1]],     ord = order(net_clust[[1]]$alpha %*% net_clust[[1]]$pi[[1]])) plot(best_partition[[1]], type = \"graphon\",      ord = order(best_partition[[1]]$alpha %*% best_partition[[1]]$pi[[1]]))  +    plot(best_partition[[2]], type = \"graphon\",         ord = order(best_partition[[2]]$alpha %*% best_partition[[2]]$pi[[1]])) +   plot_layout(guides = \"collect\") + plot_annotation(tag_levels = \"1\")"},{"path":"https://Chabert-Liddel.github.io/colSBM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Saint-Clair Chabert-Liddell. Author, maintainer.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chabert-Liddell, S. C., Barbillon, P., & Donnet, S. (2022). Learning common     structures collection networks.     application food webs. arXiv preprint arXiv:2206.00560.","code":"@Article{,   title = {Learning common structures in a collection of networks. An application to food webs},   author = {{Chabert-Liddell} and {Saint-Clair} and {Barbillon} and {Pierre} and {Donnet} and {Sophie}},   journal = {arXiv preprint arXiv:2206.00560},   year = {2022}, }"},{"path":"https://Chabert-Liddel.github.io/colSBM/index.html","id":"colsbm","dir":"","previous_headings":"","what":"Stochastic Block Model for Collection of Networks","title":"Stochastic Block Model for Collection of Networks","text":"colSBM R package implements methods clustering inferring mesoscale structure collection networks. particular, allows : Find common mesoscale structure collection networks using Stochastic Block Model (SBM) extension joint modeling collection networks. Provide clustering nodes networks. Classifies networks groups networks similar mesoscale structures. Mathematical details methods well simulation studies applications can find Chabert-Liddell, Barbillon, Donnet (2022) .","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stochastic Block Model for Collection of Networks","text":"can install development version colSBM GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Chabert-Liddell/colSBM\")"},{"path":"https://Chabert-Liddel.github.io/colSBM/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Stochastic Block Model for Collection of Networks","text":"Chabert-Liddell, Saint-Clair, Pierre Barbillon, Sophie Donnet. 2022. “Learning Common Structures Collection Networks. Application Food Webs.” arXiv Preprint arXiv:2206.00560.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":null,"dir":"Reference","previous_headings":"","what":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"R6 Class object, collection model population sbm netowrks R6 Class object, collection model population sbm netowrks","code":""},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"bmpop$plot() bmpop$new() bmpop$optimize_sbm() bmpop$optimize_from_sbm() bmpop$optimize_spectral() bmpop$optimize_init() bmpop$optimize_from_zinit() bmpop$burn_in() bmpop$forward_pass() bmpop$backward_pass() bmpop$optimize() bmpop$forward_backward() bmpop$choose_models() bmpop$show() bmpop$print() bmpop$clone()","code":""},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$plot(type = \"trace\", ...)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$new(   netlist = NULL,   net_id = NULL,   directed = NULL,   model = \"bernoulli\",   free_density = FALSE,   free_mixture = FALSE,   fit_sbm = NULL,   Z_init = NULL,   global_opts = list(),   fit_opts = list() )"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_sbm()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_from_sbm(index, Q, nb_clusters)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_spectral(index, Q, nb_clusters)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_init(index, Z, Q, nb_clusters, Cpi = NULL, Calpha = NULL)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize_from_zinit(index, Q, nb_clusters)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$burn_in()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$forward_pass(   Q_min = self$global_opts$Q_min,   Q_max = self$global_opts$Q_max,   index = seq(self$M),   nb_clusters = 1L )"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$backward_pass(   Q_min = self$global_opts$Q_min,   Q_max = self$global_opts$Q_max,   index = seq(self$M),   nb_clusters = 1L )"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$optimize()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$forward_backward()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$choose_models(models, Q, index = seq(self$M), nb_clusters = 1L)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$show(type = \"Fitted Collection of Simple SBM\")"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$print()"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"objects class cloneable method.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"","code":"bmpop$clone(deep = FALSE)"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/bmpop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a collection of model for population of sbm netowrks — bmpop","text":"deep Whether make deep clone.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/clusterize_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition of a collection of networks based on their common\nmesoscale structures — clusterize_networks","title":"Partition of a collection of networks based on their common\nmesoscale structures — clusterize_networks","text":"Partition collection networks based common mesoscale structures","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/clusterize_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition of a collection of networks based on their common\nmesoscale structures — clusterize_networks","text":"","code":"clusterize_networks(   netlist,   colsbm_model,   net_id = NULL,   directed = NULL,   model = \"bernoulli\",   fit_sbm = NULL,   nb_run = 3L,   global_opts = list(),   fit_opts = list(),   fit_init = NULL,   full_inference = FALSE )"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/clusterize_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition of a collection of networks based on their common\nmesoscale structures — clusterize_networks","text":"netlist list matrices. colsbm_model colSBM use, one \"iid\", \"pi\", \"delta\", \"deltapi\". net_id vector string, name networks. directed boolean, networks directed . model string, emission distribution, either \"bernoulli\" (default) \"poisson\" fit_sbm list model using sbm package. Use speed initialization. nb_run integer, number run algorithm . global_opts Global options outer algorithm output fit_opts Fit options VEM algorithm fit_init use! Optional fit init initializing algorithm. full_inference default \"FALSE\", algorithm stop splitting groups networks improve BICL criterion. \"TRUE\", continue split groups trivial classification one network per group.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/clusterize_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition of a collection of networks based on their common\nmesoscale structures — clusterize_networks","text":"list models recursive partition collection networks.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/clusterize_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partition of a collection of networks based on their common\nmesoscale structures — clusterize_networks","text":"best partition extract function extract_best_partition(). object list FitSimpleSBMPop object, model given number blocks Q.","code":""},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/clusterize_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partition of a collection of networks based on their common\nmesoscale structures — clusterize_networks","text":"","code":"#' # Trivial example with Gnp networks: Net <- lapply(list(.7, .7, .2, .2),               function(p) {                A <- matrix(0, 15, 15 )                A[lower.tri(A)][sample(15*14/2, size = round(p*15*14/2))] <- 1                A <- A + t(A)               }) if (FALSE) cl <- clusterized_networks(Net,                            colsbm_model = \"iid\",                            directed = FALSE,                            model = \"bernoulli\",                            nb_run = 1                            )"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/colSBM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"colSBM: Stochastic Block Model for Collection of Networks — colSBM-package","title":"colSBM: Stochastic Block Model for Collection of Networks — colSBM-package","text":"Finds common mesoscale structure collection networks using Stochastic Block Model (SBM) extension joint modeling collection networks. Provides clustering nodes networks. Classifies networks groups networks similar mesoscale structures.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/colSBM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"colSBM: Stochastic Block Model for Collection of Networks — colSBM-package","text":"Maintainer: Saint-Clair Chabert-Liddell saint-clair.chabert-liddell@inrae.fr (ORCID)","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"Compute dissimilarity 2 mesoscale structures","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"","code":"dist_bmpop_max(   pi,   alpha,   delta = c(1, 1),   weight = \"max\",   norm = \"L2\",   directed )"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"pi list two probability vectors alpha list two connectivity matrices delta vector 2 density parameters (optional) weight One \"max\" (default) \"mean\". See details norm \"L1\"\"L2\" norm computation directed structure networks directed?","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"dissimilarity two mesoscale structure.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/dist_bmpop_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the dissimilarity between 2 mesoscale structures — dist_bmpop_max","text":"weight \"max\" weight block computed pmax(pi[[1]], pi[[2]]). \"mean\", take average. \"max\" penalize greater extent difference block proportion structure.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/estimate_colSBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a colSBM on a collection of networks — estimate_colSBM","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"Estimate colSBM collection networks","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"","code":"estimate_colSBM(   netlist,   colsbm_model,   net_id = NULL,   directed = NULL,   model = \"bernoulli\",   fit_sbm = NULL,   nb_run = 3L,   global_opts = list(),   fit_opts = list(),   fit_init = NULL )"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"netlist list matrices. colsbm_model colSBM use, one \"iid\", \"pi\", \"delta\", \"deltapi\". net_id vector string, name networks. directed boolean, networks directed . model string, emission distribution, either \"bernoulli\" (default) \"poisson\" fit_sbm list model using sbm package. Use speed initialization. nb_run integer, number run algorithm . global_opts Global options outer algorithm output fit_opts Fit options VEM algorithm fit_init use! Optional fit init initializing algorithm.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"bmpop object listing collection models collection. networks","code":""},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/estimate_colSBM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a colSBM on a collection of networks — estimate_colSBM","text":"","code":"# Trivial example with Gnp networks: Net <- lapply(list(.7, .7, .2, .2),               function(p) {                 A <- matrix(0, 15, 15 )                A[lower.tri(A)][sample(15*14/2, size = round(p*15*14/2))] <- 1                 A <- A + t(A)               }) if (FALSE) cl <- estimate_colSBM(Net,                      colsbm_model = \"delta\",                      directed = FALSE,                      model = \"bernoulli\",                      nb_run = 1                      )"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/extract_best_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the best partition from the list of model given by the function\nclusterize_networks(). — extract_best_partition","title":"Extract the best partition from the list of model given by the function\nclusterize_networks(). — extract_best_partition","text":"Extract best partition list model given function clusterize_networks().","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/extract_best_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the best partition from the list of model given by the function\nclusterize_networks(). — extract_best_partition","text":"","code":"extract_best_partition(l)"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/extract_best_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the best partition from the list of model given by the function\nclusterize_networks(). — extract_best_partition","text":"l list model obtained function  clusterize_networks()","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/extract_best_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the best partition from the list of model given by the function\nclusterize_networks(). — extract_best_partition","text":"list model giving best partition.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":null,"dir":"Reference","previous_headings":"","what":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"R6 Class object, fitted population netowrks sbm $optimize() done R6 Class object, fitted population netowrks sbm $optimize() done","code":""},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"fitSimpleSBMPop$plot() fitSimpleSBMPop$new() fitSimpleSBMPop$compute_map() fitSimpleSBMPop$objective() fitSimpleSBMPop$vb_tau_alpha() fitSimpleSBMPop$vb_tau_pi() fitSimpleSBMPop$entropy_tau() fitSimpleSBMPop$fn_vb_alpha_delta() fitSimpleSBMPop$gr_vb_alpha_delta() fitSimpleSBMPop$eval_g0_vb_alpha_delta() fitSimpleSBMPop$eval_jac_g0_vb_alpha_delta() fitSimpleSBMPop$update_alpha_delta() fitSimpleSBMPop$compute_vbound() fitSimpleSBMPop$compute_penalty() fitSimpleSBMPop$compute_icl() fitSimpleSBMPop$compute_BICL() fitSimpleSBMPop$compute_exact_icl() fitSimpleSBMPop$compute_exact_icl_iid() fitSimpleSBMPop$update_map_parameters() fitSimpleSBMPop$fixed_point_tau() fitSimpleSBMPop$fixed_point_alpha_delta() fitSimpleSBMPop$update_pi() fitSimpleSBMPop$update_pim() fitSimpleSBMPop$update_alpham() fitSimpleSBMPop$update_alpha() fitSimpleSBMPop$init_clust() fitSimpleSBMPop$make_permutation() fitSimpleSBMPop$m_step() fitSimpleSBMPop$ve_step() fitSimpleSBMPop$update_mqr() fitSimpleSBMPop$optimize() fitSimpleSBMPop$show() fitSimpleSBMPop$print() fitSimpleSBMPop$clone()","code":""},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$plot(   type = \"graphon\",   ord = NULL,   mixture = FALSE,   net_id = NULL,   ... )"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$new(   A = NULL,   Q = NULL,   Z = NULL,   mask = NULL,   net_id = NULL,   model = \"bernoulli\",   free_mixture = TRUE,   free_density = TRUE,   directed = NULL,   init_method = \"spectral\",   weight = NULL,   Cpi = NULL,   Calpha = NULL,   logfactA = NULL,   fit_opts = list(algo_ve = \"fp\", approx_pois = FALSE, minibatch = TRUE, verbosity = 1) )"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_map()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$objective()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$vb_tau_alpha(m, map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$vb_tau_pi(m, map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$entropy_tau(m)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$fn_vb_alpha_delta(par, emqr, nmqr)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$gr_vb_alpha_delta(par, emqr, nmqr)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$eval_g0_vb_alpha_delta(par, emqr, nmqr)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$eval_jac_g0_vb_alpha_delta(par, emqr, nmqr)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_alpha_delta(map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_vbound()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_penalty()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_icl(map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_BICL(map = TRUE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_exact_icl()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$compute_exact_icl_iid()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_map_parameters()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$fixed_point_tau(m, max_iter = 10, tol = 0.01)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$fixed_point_alpha_delta(   map = FALSE,   max_iter = 50,   tol = 1e-06 )"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_pi(m, map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_pim(m, map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_alpham(m, map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_alpha(map = FALSE)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$init_clust()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$make_permutation()"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$m_step(map = FALSE, max_iter = 100, tol = 0.001, ...)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$ve_step(m, max_iter = 20, tol = 0.001, ...)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$update_mqr(m)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$optimize(max_step = self$fit_opts$max_step, tol = 0.001, ...)"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$show(type = \"Fitted Collection of Simple SBM\")"},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$print()"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"objects class cloneable method.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"","code":"fitSimpleSBMPop$clone(deep = FALSE)"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/fitSimpleSBMPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An R6 Class object, a fitted population of netowrks sbm\nonce $optimize() is done — fitSimpleSBMPop","text":"deep Whether make deep clone.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/foodwebs.html","id":null,"dir":"Reference","previous_headings":"","what":"A collection of 8 food webs — foodwebs","title":"A collection of 8 food webs — foodwebs","text":"dataset containing 8 food webs coming study.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/foodwebs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A collection of 8 food webs — foodwebs","text":"","code":"foodwebs"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/foodwebs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A collection of 8 food webs — foodwebs","text":"named list 8 binary matrices: price price, US dollars carat weight diamond, carats","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/foodwebs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A collection of 8 food webs — foodwebs","text":"http://www.web--life.es/","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.bmpop.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the trace of the different criteria in function of the number of\nclusters — plot.bmpop","title":"Plot the trace of the different criteria in function of the number of\nclusters — plot.bmpop","text":"Plot trace different criteria function number clusters","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.bmpop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the trace of the different criteria in function of the number of\nclusters — plot.bmpop","text":"","code":"# S3 method for bmpop plot(x, type = \"trace\", ...)"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.bmpop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the trace of the different criteria in function of the number of\nclusters — plot.bmpop","text":"x bmpop object. type type plot. \"trace\". ... argument passed","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.bmpop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the trace of the different criteria in function of the number of\nclusters — plot.bmpop","text":"plot, ggplot2 object.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"Plot matrix summaries collection mesoscale structure","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"","code":"# S3 method for fitSimpleSBMPop plot(x, type = \"graphon\", ord = NULL, mixture = FALSE, net_id = 1, ...)"},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"x fitSimpleSBMPOP object. type type plot. \"graphon\", \"meso\" \"block\". ord reordering blocks. mixture block proportions network plotted well? net_id Use plot network \"graphon\" view. ... argument passed","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/reference/plot.fitSimpleSBMPop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot matrix summaries of the collection mesoscale structure — plot.fitSimpleSBMPop","text":"plot, ggplot2 object.","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/news/index.html","id":"colsbm-020","dir":"Changelog","previous_headings":"","what":"colSBM 0.2.0","title":"colSBM 0.2.0","text":"Added sparse matrix Matrix package leading less intensive memory usage Added extract_best_partition() function Improved documentation, references vignette","code":""},{"path":[]},{"path":[]},{"path":"https://Chabert-Liddel.github.io/colSBM/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes:","title":"colSBM 0.1.0","text":"Changed name EstimateBMPOP() clusterize_networks() internal functions exported anymore","code":""},{"path":"https://Chabert-Liddel.github.io/colSBM/news/index.html","id":"cosmetic-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Cosmetic changes","title":"colSBM 0.1.0","text":"Cleaned documentation user functions Added NEWS.md file track changes package.","code":""}]
